#
# $ make playbook
#
# This playbook has been tested with Ubuntu 16.04 and Ansible 2.7.
#
- hosts: [127.0.0.1]
  connection: local

  vars:

    dpkg_query: "dpkg-query --show --showformat='${db:Status-Status}\n' '%s' | grep '^installed'"
    localrc_query: 'echo ".localrc_`uname -n`_`uname -o 2>/dev/null || echo Darwin`" | tr "[A-Z]" "[a-z]" | tr "/" "_"'
    tmp_path: '/tmp'

    nameservers:
      # Cloudflare
      - 1.1.1.1
      - 1.0.0.1
      - 2606:4700:4700::1111
      - 2606:4700:4700::1001

    firefox_unofficial_extensions:
      bypass-paywalls: # See https://github.com/iamadamdev/bypass-paywalls-firefox/releases
        url: "https://github.com/iamadamdev/bypass-paywalls-firefox/releases/download/v%(version)s/bypass_paywalls-%(version)s-an+fx.xpi"
        version: 1.5.1
        checksum: "md5:8937de9f94d350abf532d585e2f22df5"
      browser-mpris2: # See https://github.com/otommod/browser-mpris2/issues/11#issuecomment-493687444
        url: "https://github.com/CBiX/browser-mpris2/releases/download/v%(version)s-%(commit)s/browser-mpris2-%(commit)s-signed-firefox-fh.cbix.de.xpi"
        version: 0.1-20190518
        commit: 7f11327
        checksum: "md5:1e827d98b8d23ff52f9a4669c8e83252"
        native:
          name: "org.mpris.browser_host"
          allowed_extensions: ["browser-mpris2-%(commit)s-signed-fh@cbix.de"]
          type: "stdio"
          url: "https://raw.githubusercontent.com/otommod/browser-mpris2/%(commit)s/native/chrome-mpris2"
          checksum: "md5:71af835e0d424e629645feb62c8173e3"
          path: "~/bin/chrome-mpris2"
          mode: "+x"

    # See https://github.com/mozilla/policy-templates/blob/master/README.md
    #
    firefox_policies:
      policies:
        DisableTelemetry: true
        DisablePocket: true
        DNSOverHTTPS:
          Enabled: true
          ProviderURL: "https://1.1.1.1/dns-query"
          Locked: true
        Certificates:
          ImportEnterpriseRoots: true
          Install:
            # InfoNotary
            - InfoNotaryQualifiedLegalPersonSealCA.pem
            - InfoNotaryQualifiedPersonalSignCA.pem
            - InfoNotaryQualifiedTimeStampingServiceCA.pem
            - InfoNotaryQualifiedValidatedDomainCA.pem
            - InfoNotaryQualifiedValidationServicesCA.pem
            - InfoNotaryTSPRoot.pem
            # B-Trust (Borica)
            - B-TrustOperationalACA.cer
            - B-TrustOperationalQCA.cer
            - B-TrustOperCA5AES_PEM.cer
            - B-TrustOperCA5QES_PEM.cer
            - B-TrustRootACA.cer
            - B-TrustRootCA5_PEM.cer
            - B-TrustRootQCA.cer
        SecurityDevices:
          Bit4Id: "/usr/lib/libbit4ipki.so"
        Extensions:
          Install: "{%
            set extensions = []
          %}{%
            for name, extension in firefox_unofficial_extensions | dictsort
          %}{%
              set _ = extensions.extend([ \"/usr/local/lib/firefox/extensions/\" + name + \"-\" + extension.version + (\"-\" + extension.commit if \"commit\" in extension else \"\") + \"-unofficial.xpi\" ])
          %}{%
            endfor
          %}{{ extensions }}"

    # See https://support.mozilla.org/en-US/kb/customizing-firefox-using-autoconfig
    #
    # See https://hg.mozilla.org/mozilla-central/file/tip/browser/app/profile/firefox.js
    #     https://hg.mozilla.org/mozilla-central/file/6663d3dc883b6ad0d0dfa9346f9ceabf2b2c7967/browser/app/profile/firefox.js (April 2020)
    #
    firefox_about_config:
      # Usability & quality of life improvements
      #
      "mousewheel.acceleration.start": 10 # Wait for two mouse wheel scrolls before enabling acceleration,
      "mousewheel.acceleration.factor": 5 # Accelerate by this much for each mouse wheel scroll.
      "browser.urlbar.update1": false # Don't use the new URL bar which looks like an annoying pop up (Firefox 75+).
      "browser.urlbar.update1.interventions": false #  If true, Firefox shows actionable tips in the URL bar when the user is searching for those actions.
      "browser.urlbar.update1.searchTips": false # If true, Firefox shows new users and those about to start an organic search a tip encouraging them to use the URL bar.
      "browser.urlbar.update1.view.stripHttps": false # Don't strip https:// from URL suggestions (Firefox 75+).
      "browser.urlbar.openViewOnFocus": false # Don't open the URL bar drop-down immediately on focus (Firefox 75+).
      "browser.urlbar.trimURLs": false # Force Firefox to always show https:// and www. terms for URLs in address bar.
      # Development
      #
      "devtools.chrome.enabled": true # This enables Ctrl+Alt+Shift+J as well as the command entry in Ctrl+Shift+J.
      # Security
      #
      # See https://web.archive.org/web/20190410203751/https://www.internetsociety.org/blog/2018/12/dns-privacy-support-in-mozilla-firefox/
      #
      "network.trr.mode": 3
      "network.trr.bootstrapAddress": "1.1.1.1"
      # See https://blog.mozilla.org/security/2021/01/07/encrypted-client-hello-the-future-of-esni-in-firefox/
      # See https://blog.cloudflare.com/encrypted-client-hello/
      "network.security.esni.enabled": true
      "privacy.firstparty.isolate": true
      # See https://web.archive.org/web/20201118141821/https://blog.mozilla.org/security/2020/11/17/firefox-83-introduces-https-only-mode/
      "dom.security.https_only_mode": true
      "dom.security.https_only_mode_ever_enabled": true
      # Network
      #
      "network.dns.disableIPv6": true # We don't use or need IPv6.
      # Caching
      #
      "browser.cache.disk.enable": false # Don't trash my SSD!
      "browser.cache.disk.parent_directory": "/tmp/.mozilla/cache/firefox" # If we ever re-enable disk caching, use tmpfs.
      "browser.cache.memory.enable": true
      "browser.cache.memory.capacity": 1048576 # 1GB
      "browser.cache.memory.max_entry_size": 20480 # 20MB
      # Colour Management
      "gfx.color_management.mode": 1
      "gfx.color_management.enablev4": true
      # Experimental
      #
      "gfx.webrender.all": true
      "media.videocontrols.picture-in-picture.enabled": true # https://web.archive.org/web/20191203233905/https://css-tricks.com/an-introduction-to-the-picture-in-picture-web-api/#article-header-id-0
      "media.hardwaremediakeys.enabled": true # https://web.archive.org/web/20200324112855/https://www.ghacks.net/2020/03/23/firefox-will-soon-support-hardware-media-controls/
      "dom.media.mediasession.enabled": true  #

    firefox_locales: [en, bg]

    waterfox_version: 2020.02
    waterfox_release: linux64
    waterfox_platform: linux-x86_64
    waterfox_locale: en-US
    waterfox_checksum: "sha256:a3b5d62078fad09bd165d54af9c73d6928891aafab65d2cd7916eac19e6d6980"

    thunderbird_version: 78.2.2
    thunderbird_locale: en-GB
    thunderbird_platform: linux-x86_64
    thunderbird_checksum: 'sha256:ce353fc8e6e8e8d2ec1378f76879c0bebb55f867f39488fe48a1995685c85b00'

    birdtray_version: 1.8.1
    birdtray_platform: linux-x86_64

    neovim_version: 0.4.4
    neovim_checksum: "sha256:1eea3d44f55bab0856d08737c0c50ead7645ae3afd6352a252bc403b9843ec95"
    neovim_dictionaries: [bg.utf-8]

    git_lfs_gpg_key_id: "DC282033"

    asdf_version: '0.8.0'
    asdf_plugins:
      - { name: 'golang', url: 'https://github.com/kennyp/asdf-golang.git' }
    asdf_rc:
      legacy_version_file: 'yes'

    python_version: '3.8.0'

    ruby_version: '2.6.5'

    docker_gpg_key_id: "0EBFCD88"
    docker_platform: amd64
    docker_compose_version: 1.25.4
    docker_compose_checksum: "sha256:542e93b1d5106d2769b325f60ba9a0ba087bb96e30dc2c1cb026f0cb642e9aed"
    docker_machine_version: 0.16.1
    docker_machine_checksum: "sha256:44a008c14549156222b314b1448c22ef255b446419fcf96570f3f288dff318a9"
    docker_machine_drivers:
      linode: { url: "https://github.com/linode/docker-machine-driver-%(name)s/releases/download/v%(version)s/docker-machine-driver-%(name)s_linux-amd64.zip", version: 0.1.8, checksum: "sha256:b31b6a504c59ee758d2dda83029fe4a85b3f5601e22dfa58700a5e6c8f450dc7" }

    gnupg_conf:
      use-agent: ''
      charset: 'UTF-8'
      default-key: '595EA753'
    gnupg_agent_conf:
      enable-ssh-support: ''
      pinentry-program: '/usr/bin/pinentry-gnome3'
      default-cache-ttl: 3600
      max-cache-ttl: 7200

    authy_desktop_version: 1.8.3
    authy_desktop_checksum: "md5:630362cf725391d1fc86c9a4d06f0161"

    android_studio_build: 193.6626763
    android_studio_version: 4.0.1.0
    android_studio_checksum: "sha256:f2f82744e735eae43fa018a77254c398a3bab5371f09973a37483014b73b7597"
    android_home: /opt/android/sdk

    dropbox_version: 2019.01.31
    dropbox_platform: amd64

    keybase_platform: amd64

    tarsnap_version: 1.0.39

    imagemagick_version: 7.0.10-6
    imagemagick_checksum: "sha256:30ac7ce423cef9fb7baf0aefc734ae7b2593b9499c3782057ab73b7a360a0ac5"

    youtube_dl_version: 2021.01.24.1
    youtube_dl_checksum: "sha512:0e2db11c78256bcf12122655817820fc37bcbb83b1ef283861d1641962fd9acec8b97c96c6462fe07bbe73a86054c0fd4fad7a55d9c5a6211e35c4a4a07f73d3"

    fd_version: 7.5.0
    fd_platform: amd64
    fd_checksum: "sha256:0def65ac4a0158209112c3df2522a853b439743740d422af2c16c994398b3cd7"

    ripgrep_version: 12.0.1
    ripgrep_platform: amd64
    ripgrep_checksum: "sha256:feebb3484e8f590c6024566b880da38b6c6092344a5cb5118ba6b84ddc03d214"

    pup_version: 0.4.0
    pup_platform: linux_amd64
    pup_checksum: "sha256:ec3d29e9fb375b87ac492c8b546ad6be84b0c0b49dab7ff4c6b582eac71ba01c"

    jq_version: 1.6
    jq_platform: linux64
    jq_checksum: "sha256:af986793a515d500ab2d35f8d2aecd656e764504b789b66d7e1a0b727a124c44"

    httpie_version: 2.4.0
    httpie_plugins:
      - { name: 'httpie-oauth', version: 1.0.2 }

    awscli_version: '>1.16'
    s3cmd_version: '>=2.1'

    fzf_version: 0.25.1
    fzf_platform: linux_amd64
    fzf_checksum: "sha256:8bbb11b14351b95e7ea79600d285301eff12aa0942ce97442d3570d59bca0242"

    bat_version: 0.15.4
    bat_platform: amd64
    bat_checksum: "sha256:66b5fa31e4946da9331824fba4b6a7076565fe83866f14562450a010a5112857"

    delta_version: 0.0.18
    delta_platform: amd64
    delta_checksum: "sha256:7ed5e452b9a07c2311aefc124ef7e6a54efc0dc4f7004a4b7d9e3f3a537abc2e"

    xidel_version: 0.9.8-1
    xidel_platform: amd64
    xidel_checksum: "sha256:f6a6e29b77547d5ae38383440bd653b3eaf9eeb470def14cc48154a4f6925f69"

    # See https://dl.equinox.io/ngrok/ngrok/stable/archive
    ngrok_version: 2.3.18
    ngrok_platform: linux-amd64
    ngrok_stable_channel_id: 8jFoSpgnjgu
    ngrok_checksum: "sha256:3e4f39dd3130b80dd0a736182712952100fcc462a0eb4d9ca15e50668c9d3862"

    terraform_version: 0.14.7
    terraform_checksum: "sha256:6b66e1faf0ad4ece28c42a1877e95bbb1355396231d161d78b8ca8a99accc2d7"
    terraform_platform: linux_amd64
    terraform_plugins: { }

    zsh_version: 5.8
    zsh_checksum: "sha256:dcc4b54cc5565670a65581760261c163d720991f0d06486da61f8d839b52de27"

    rxvt_unicode_version: 9.22
    rxvt_unicode_cvs_date: "2020-04-01"
    rxvt_unicode_patches: [
      { url: "https://gist.githubusercontent.com/StanAngeloff/743c1cbb7566b5f0d84aeb41503bb989/raw/4abf0e47dc1bc4f231c97488893c205e798e3de6/font-width-fix.patch", checksum: "sha256:686770fe4e8d6bb0ba497ad2e1f217d17515f2544d80abe76496c63ead2bfaa4" },
      { url: "https://gist.githubusercontent.com/StanAngeloff/743c1cbb7566b5f0d84aeb41503bb989/raw/4abf0e47dc1bc4f231c97488893c205e798e3de6/line-spacing-fix.patch", checksum: "sha256:546a388d0595404a59c71c3eaeba331031032a75f96c57e9a860f27bbd7ebfcc" },
      { url: "https://gist.githubusercontent.com/StanAngeloff/743c1cbb7566b5f0d84aeb41503bb989/raw/4abf0e47dc1bc4f231c97488893c205e798e3de6/rxvt-unicode-clipboard.patch", checksum: "sha256:fef02e5498d65703910d1205780681a8b828df09e418e676d26192664c91a4d4" },
      { url: "https://gist.githubusercontent.com/StanAngeloff/743c1cbb7566b5f0d84aeb41503bb989/raw/52f71afa8115c032eae0453da616d8e2213d748f/add-space-to-extent_test_chars.patch", strip: 1, checksum: "sha256:0f010641de2b7f9ce611d7d547ea7f1dae7ca8b2b070c6274e5307e6b8754016" },
      { url: "https://gist.githubusercontent.com/StanAngeloff/743c1cbb7566b5f0d84aeb41503bb989/raw/52f71afa8115c032eae0453da616d8e2213d748f/enable-wide-glyphs.patch", strip: 1, checksum: "sha256:2cac399b45a9056914a776f3dd8cad86e024300ca7f2bbe528abd8ca10b09ca1" },
    ]
    rxvt_unicode_configure_args: [
      --enable-256-color,
      --enable-combining,
      --enable-fading,
      --enable-font-styles,
      --enable-wide-glyphs,
      --enable-iso14755,
      --enable-keepscrolling,
      --enable-lastlog,
      --enable-mousewheel,
      --enable-next-scroll,
      --enable-perl,
      --enable-pointer-blank,
      --enable-rxvt-scroll,
      --enable-selectionscrolling,
      --enable-slipwheeling,
      --disable-smart-resize,
      --enable-startup-notification,
      --enable-transparency,
      --enable-unicode3,
      --enable-utmp,
      --enable-wtmp,
      --enable-xft,
      --enable-xim,
      --enable-xterm-scroll,
      --disable-pixbuf,
      --disable-frills
    ]

    tmux_version: 3.1c
    tmux_checksum: "sha256:918f7220447bef33a1902d4faff05317afd9db4ae1c9971bef5c787ac6c88386"

    tig_version: 2.5.2
    tig_checksum: "sha256:1e5a8175627231ba619686ec338b4ad2843a6526122ea4e9fde1739dd2b4830b"

    envchain_version: 1.0.1
    envchain_checksum: "sha256:09af1fe1cfba3719418f90d59c29c081e1f22b38249f0110305b657bd306e9ae"

    jump_version: 0.30.1
    jump_platform: amd64
    jump_checksum: "sha256:4e236a0ebf4b05e72fdb34fc1fd461a8292a82fb2d282bfbe09b6c6215360465"

    pam_google_authenticator_version: 1.08
    pam_google_authenticator_deb_version: 20191231
    pam_google_authenticator_checksum: "sha256:6f6d7530261ba9e2ece84214f1445857d488b7851c28a58356b49f2d9fd36290"

    sshd_host_keys: [ed25519, rsa, ecdsa]
    sshd_config:
      Port: 2022
      ListenAddress: '0.0.0.0'
      LoginGraceTime: 30
      PasswordAuthentication: 'no'
      ChallengeResponseAuthentication: 'yes'
      X11Forwarding: 'no'
      # See https://wiki.mozilla.org/Security/Guidelines/OpenSSH
      #
      # The Modern (OpenSSH 6.7+) profile is used.
      #
      KexAlgorithms: 'curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group-exchange-sha256'
      Ciphers: 'chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr'
      MACs: 'hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com'
      # See https://wiki.archlinux.org/index.php/OpenSSH#Two-factor_authentication_and_public_keys
      AuthenticationMethods: 'publickey keyboard-interactive:pam'
      # LogLevel VERBOSE logs user's key fingerprint on login. Needed to have a clear audit track of which key was using to log in.
      LogLevel: VERBOSE
      # Log sftp level file access (read/write/etc.) that would not be easily logged otherwise.
      Subsystem: 'sftp /usr/lib/ssh/sftp-server -f AUTHPRIV -l INFO'
      # Root login is not allowed for auditing reasons. This is because it's difficult to track which process belongs to which root user:
      #
      # On Linux, user sessions are tracking using a kernel-side session id, however, this session id is not recorded by OpenSSH.
      # Additionally, only tools such as systemd and auditd record the process session id.
      # On other OSes, the user session id is not necessarily recorded at all kernel-side.
      # Using regular users in combination with /bin/su or /usr/bin/sudo ensure a clear audit track.
      PermitRootLogin: 'no'
      # Use kernel sandbox mechanisms where possible in unprivileged processes
      # Systrace on OpenBSD, Seccomp on Linux, seatbelt on MacOSX/Darwin, rlimit elsewhere.
      UsePrivilegeSeparation: sandbox

    mosh_version: 1.3.2
    mosh_checksum: "sha256:da600573dfa827d88ce114e0fed30210689381bbdcff543c931e4d6a2e851216"

    php_default_version: 7.2
    php_versions: [5.6, 7.1, 7.2, 7.3, 7.4]
    php_extensions:
      '*': [apcu, bcmath, curl, gd, gmp, intl, json, mbstring, mysql, pgsql, soap, sqlite3, xml, zip]
      '5.6': [mcrypt]

    nodesource_gpg_key_id: "68576280"
    nodejs_version: 12

    wine_gpg_key_id: "F987672F"
    playonlinux_gpg_key_id: "8E3D6C3A"

    qemu_version: 5.0.0
    qemu_checksum: "sha256:2f13a92a0fa5c8b69ff0796b59b86b080bbb92ebad5d301a7724dd06b5e78cb6"

    ffmpeg_version: 4.1.4
    ffmpeg_platform: amd64
    ffmpeg_checksum: "md5:d5828f8cc093812041570860c50d5a28"

    tesseract_languages: [eng, bul]

    ferdi_version: 5.6.0-beta.5
    ferdi_platform: amd64
    ferdi_checksum: "sha256:7c3533622af9dce4373b8a3d786ef4b060fe149d3fe120cdb137e1f7b5854674"

    steam_launcher_version: 1.0.0.61
    steam_launcher_checksum: "sha256:5e7d3f1cb1de847f31152998bdc8137855a1a0f7b0dc099db6a7f4d7e33fd911"

    fraidycat_version: 1.1.3
    fraidycat_checksum: "sha256:a818f9bd90906bd1491ee14d9f97b6a2977a8b0985ec4b0aef0941310eeca114"

    bingwallpaper_version: '@{2020-09-23}'
    bingwallpaper_checksum: 'sha256:50a770e1eaff5cb5cd8cb7b7a549347a6d6b01a3ad0399b38ecd65be6d1de2b3'

    ufw_policy:
      - { direction: incoming, policy: deny }
      - { direction: outgoing, policy: allow }

    ufw_applications:
     #LocalService: { title: 'Local Service', description: 'A locally running service, such as a NodeJS process, a PHP development server, etc.', ports: ['3000/tcp', '3030/tcp', '8000/tcp'] }
      Expo: { title: 'Expo', description: 'The fastest way to build an app.', ports: ['19000:19100/tcp'] }
      SteamLink: { title: 'Steam Link', description: 'Steam Link game streaming.', ports: ['27037/tcp', '27031/udp', '27036'] }

    ufw_rules:
     #- { rule: allow, app: 'LocalService', direction: in, src: '172.16.0.0/12', comment: 'Allow Docker containers to communicate with local services/1.' }
      - { rule: allow, app: 'Expo', direction: in, src: '192.168.0.0/23' }
      - { rule: allow, app: 'SteamLink', direction: in, src: '192.168.0.0/23' }

  handlers:
    - { name: "ufw::restart", become: yes, service: { name: ufw, state: restarted } }
    - { name: "sshd::restart", become: yes, service: { name: ssh, state: restarted } }
    - { name: "bluetooth::restart", become: yes, service: { name: bluetooth, state: restarted } }
    - { name: "grub::update", become: yes, command: '/usr/sbin/update-grub2 -o /boot/grub/grub.cfg' }
    - { name: "systemd::resolved::restart", become: yes, systemd: { name: 'systemd-resolved.service', state: restarted } }
    - { name: "NetworkManager::reload", become: yes, service: { name: 'NetworkManager', state: reloaded } }

  tasks:

  - { name: "Prerequisites: Paths writeable by the user", become: yes, file: { path: "{{ item }}", owner: "{{ ansible_user_id }}" }, with_items: ["/usr/local/bin", "/opt"] }

  # 9. sudo password is required each time
  - { name: "System: sudo timeout", become: yes, copy: { content: "# Prompt for a password on every escalation.\nDefaults timestamp_timeout=0\n", dest: "/etc/sudoers.d/timeout", force: no, validate: "visudo -cf %s" } }

  # 10. tmpfs at /tmp
  - { name: "System: Make /tmp a tmpfs", become: yes, lineinfile: { path: "/etc/fstab", regexp: "\\/tmp\\s", line: "tmpfs /tmp tmpfs rw,nosuid,nodev,size=4G 0 0" } }

  # 15. i386 is needed for Wine.
  - { name: "System: Add dpkg architectures", become: yes, lineinfile: { dest: "/var/lib/dpkg/arch", line: "{{ item }}", create: yes }, with_items: [amd64, i386] }
  - { name: "System: Update apt cache", become: yes, apt: { update_cache: yes, cache_valid_time: "{{ 24 * 60 * 60 }}" } }

  # 20. build-essential & a few more packages are essential
  - { name: "System: Install essentials", become: yes, apt: { pkg: [build-essential, cmake, unzip], state: present } }

  # 30. sysctl
  - { name: "Tweak kernel parameters (sysctl)", become: yes, sysctl: { name: "{{ item.name }}", state: "{{ item.state | default('present') }}", value: "{{ item.value }}", sysctl_file: '/etc/sysctl.d/60-longitude.conf', reload: yes }, when: "ansible_env.IS_DOCKERIZED | default(0) != '1'", tags: [sysctl], with_items: [
      { name: fs.inotify.max_user_watches, value: 524288 },
    ] }

  # 40. Kernel
  - name: "GRUB: Update Linux kernel command-line"
    become: yes
    lineinfile:
      create: yes
      path: '/etc/default/grub'
      backrefs: yes
      regexp: "^#?(GRUB_CMDLINE_LINUX=(?!.*\\s{{ item }}\\b)\"[^\"]*)(\".*)"
      line: "\\1 {{ item }}\\2"
      insertafter: 'EOF'
    with_items:
      - 'zswap.enabled=1' # See https://wiki.archlinux.org/index.php/Zswap, enabled by default since 5.7 (18.04 comes with a HWE running 5.3).
    notify: "grub::update"
    tags: [kernel, grub]
  - { name: "Kernel: Install HWE", become: yes, apt: { pkg: [linux-generic-hwe-18.04, xserver-xorg-hwe-18.04], install_recommends: yes, state: present }, when: "ansible_distribution_version is version('18.04', '==')", tags: [kernel] }

  # 50. Hardware tweaks
  #
  # See https://web.archive.org/web/20200331074851/https://www.spinics.net/lists/linux-bluetooth/msg47685.html
  #
  - { name: "Bluetooth: Check if service installed", stat: { path: "/etc/bluetooth/input.conf" }, register: bluetooth_input_stat, tags: [bluetooth] }
  - name: "Bluetooth: Tweak input configuration"
    become: yes
    ini_file:
      path: "/etc/bluetooth/input.conf"
      no_extra_spaces: true
      section: "{{ item.option.split('/')[:-1]|join('.') }}"
      option: "{{ item.option.split('/')[-1] }}"
      value: "{{ item.value }}"
      state: present
    with_items:
      - { option: "General/UserspaceHID", value: "true" }
    notify: "bluetooth::restart"
    when: bluetooth_input_stat.stat.exists
    tags: [bluetooth]

  # 60. DNS & resolv.conf, argh!
  #
  # See https://web.archive.org/web/20200909131222/https://andrea.corbellini.name/2020/04/28/ubuntu-global-dns/
  #
  - { name: "DNS: Remove resolveconf", become: yes, apt: { pkg: 'resolveconf', state: absent }, tags: [dns, resolveconf] }
  - { name: "DNS: Start systemd-resolved.service", become: yes, systemd: { name: 'systemd-resolved.service', enabled: yes, state: started }, tags: [dns, resolveconf] }
  - { name: "DNS: Create resolved.conf.d directory", become: yes, file: { path: '/etc/systemd/resolved.conf.d/', state: directory }, tags: [dns, resolveconf] }
  - name: "DNS: Specify systemd-resolved nameservers"
    become: yes
    copy:
      dest: '/etc/systemd/resolved.conf.d/cloudflare_dns.conf'
      content: |
        ###
        ### DO NOT EDIT BY HAND, YOUR CHANGES WILL BE LOST!
        ###
        [Resolve]
        DNS={{ nameservers | join(' ') }}
        #FallbackDNS=
        #Domains=
        #LLMNR=no
        #MulticastDNS=no
        #Cache=yes
        #DNSStubListener=yes
        #ReadEtcHosts=yes
    tags: [dns, resolveconf]
    notify: "systemd::resolved::restart"
  - { name: "DNS: Check if NetworkManager is installed", stat: { path: "/etc/NetworkManager" }, register: etc_networkmanager_stat, tags: [dns, resolveconf] }
  - name: "DNS: Disable DNS handling in NetworkManager"
    become: yes
    copy:
      dest: '/etc/NetworkManager/conf.d/dns.conf'
      content: |
        ###
        ### DO NOT EDIT BY HAND, YOUR CHANGES WILL BE LOST!
        ###
        [main]
        # Do not use the dhcp-provided DNS servers,
        # but rather use the global ones specified in /etc/systemd/resolved.conf
        dns=none
        systemd-resolved=false
    notify: "NetworkManager::reload"
    when: 'etc_networkmanager_stat.stat.isdir is defined and etc_networkmanager_stat.stat.isdir'
    tags: [dns, resolveconf]

  # 100. Git
  - { name: "Git: Add PPA", become: yes, apt_repository: { repo: "ppa:git-core/ppa", update_cache: yes }, tags: [git] }
  - { name: "Git: Install packages", become: yes, apt: { pkg: [git, git-gui, gitk], state: present }, tags: [git] }
  # 110. Git LFS
  - { name: "Git: Install Git LFS prerequisites", become: yes, apt: { pkg: [gnupg, curl, debian-archive-keyring, apt-transport-https], state: present }, tags: [git] }
  - { name: "Git: Import Git LFS GPG key", become: yes, apt_key: { id: "{{ git_lfs_gpg_key_id }}", url: "https://packagecloud.io/github/git-lfs/gpgkey" }, tags: [git] }
  - { name: "Git: Add Git LFS repository", become: yes, apt_repository: { repo: "deb https://packagecloud.io/github/git-lfs/ubuntu/ {{ ansible_distribution_release }} main", update_cache: yes }, tags: [git] }
  - { name: "Git: Install Git LFS packages", become: yes, apt: { pkg: [git-lfs], state: present }, tags: [git] }
  - { name: "Git: Install git-extras packages", become: yes, apt: { pkg: [git-extras], state: present }, tags: [git] }
  # 120. git-crypt
  - { name: "Git: Install git-crypt packages", become: yes, apt: { pkg: [git-crypt], state: present }, tags: [git] }
  # 130. Git contrib tools
  - { name: "Git: Capture installed version", shell: "git --version | cut -d' ' -f3", register: git_installed_version, changed_when: no, tags: [git] }
  - { name: "diff-highlight: Check installation", become: yes, command: "ls /usr/local/bin/diff-highlight-{{ git_installed_version.stdout }}", register: git_diff_highlight_install_query, changed_when: no, failed_when: no, tags: [git] }
  - name: "diff-highlight: Compile contrib script"
    become: yes
    when: "git_diff_highlight_install_query.rc > 0"
    shell: |
      rm -rf /tmp/git-src &&
      git clone --depth 1 --branch 'v{{ git_installed_version.stdout }}' https://github.com/git/git.git /tmp/git-src &&
      cd /tmp/git-src/contrib/diff-highlight &&
      make clean diff-highlight &&
      cp diff-highlight /usr/local/bin/diff-highlight-{{ git_installed_version.stdout }}
    tags: [git]
  - { name: "diff-highlight: Set up alternatives", become: yes, alternatives: { name: 'diff-highlight', link: '/usr/local/bin/diff-highlight', path: '/usr/local/bin/diff-highlight-{{ git_installed_version.stdout }}' }, tags: [git] }

  # 200. asdf
  - { name: "asdf: Install prerequisites", become: yes, apt: { pkg: [curl, git], state: present }, tags: [asdf] }
  - { name: "asdf: Clone the repository", git: { repo: "https://github.com/asdf-vm/asdf.git", dest: "{{ ansible_env.HOME }}/.asdf", remote: "github", version: "v{{ asdf_version }}", update: yes }, tags: [asdf] }
  - name: "asdf: Install plug-ins"
    shell: |
      . "{{ ansible_env.HOME }}"/.asdf/asdf.sh &&
      asdf plugin list | grep "^{{ item.name }}$" || ( asdf plugin add "{{ item.name }}" "{{ item.url }}" && echo "{{ item.name }} added!" )
    args: { executable: "/bin/bash" }
    changed_when: "('added!' in asdf_plugin_cmd.stdout)"
    register: asdf_plugin_cmd
    with_items: "{{ asdf_plugins }}"
    tags: [asdf]
  - name: "asdf: Set up configuration"
    tags: [asdf]
    copy:
      dest: "{{ ansible_env.HOME }}/.asdfrc"
      owner: "{{ ansible_user_id }}"
      mode: 0644
      force: yes
      content: |
        ### DO NOT EDIT BY HAND, YOUR CHANGES WILL BE LOST!
        ###
        ### This file is managed by Ansible.
        ###

        {% for name, value in asdf_rc | dictsort %}
        {{ name }} = {{ value }}
        {% endfor %}

  # 210. Python
  - { name: "Python: Install pip packages & Python development headers", become: yes, apt: { pkg: [python-dev, python-pip, python3-dev, python3-pip], state: present }, tags: [python] }
  - { name: "Python: Install virtualenv", become: yes, pip: { executable: pip3, name: virtualenv, state: present }, tags: [python] }
  - { name: "Python: Install prerequisites", become: yes, apt: { pkg: [zlib1g-dev, libncurses5-dev, libgdbm-dev, libnss3-dev, libssl-dev, libreadline-dev, libffi-dev, libsqlite3-dev, libbz2-dev, liblzma-dev, uuid-dev], state: present }, tags: [python] }
  - { name: "Python: Check local installation", become: yes, command: "ls /opt/python{{ python_version.split('.')[:2]|join('.') }}", register: python_install_query, changed_when: no, failed_when: no, tags: [python] }
  - { name: "Python: Download package and signature", get_url: { url: "{{ item }}", dest: "/tmp/{{ item | basename }}" }, when: "python_install_query.rc > 0", tags: [python], with_items: [
      "https://www.python.org/ftp/python/{{ python_version }}/Python-{{ python_version }}.tar.xz",
      "https://www.python.org/ftp/python/{{ python_version }}/Python-{{ python_version }}.tar.xz.asc"
    ] }
  - { name: "Python: Check package signature", command: "gpg --status-fd 1 --no-default-keyring --keyring '{{ ansible_env.PWD }}/keys/python-Lukasz-Langa-keybase.asc.gpg' --verify /tmp/Python-{{ python_version }}.tar.xz.asc", when: "python_install_query.rc > 0", tags: [python] }
  - name: "Python: Compile & install local package"
    when: "python_install_query.rc > 0"
    shell: |
      cd /tmp &&
      tar --overwrite -Jxf 'Python-{{ python_version }}.tar.xz' &&
      cd 'Python-{{ python_version }}' &&
      ./configure --prefix='/opt/python{{ python_version.split('.')[:2]|join('.') }}' --enable-optimizations && make -j8 && make install
    tags: [python]
  - { name: "Python: Set up alternatives", become: yes, alternatives: { name: "{{ item | format(version=python_version.split('.')[:2]|join('.')) }}", link: "/usr/local/bin/{{ item | format(version=python_version.split('.')[:2]|join('.')) }}", path: "/opt/python{{ python_version.split('.')[:2]|join('.') }}/bin/{{ item | format(version=python_version.split('.')[:2]|join('.')) }}" }, tags: [python], with_items: [
      '2to3-%(version)s',
      'easy_install-%(version)s',
      'idle%(version)s',
      'pip%(version)s',
      'pydoc%(version)s',
      'python%(version)s',
      'python%(version)s-config'
    ] }
  - { name: "Python: Install local virtualenv", pip: { executable: "/opt/python{{ python_version.split('.')[:2]|join('.') }}/bin/pip3", name: virtualenv, state: present }, tags: [python] }

  # 250. Ruby
  - { name: "Ruby: Create directories", file: { path: "/opt/rubies", state: directory }, tags: [ruby] }
  - { name: "Ruby: rbenv: Check installation", command: "ls {{ ansible_env.HOME }}/.rbenv/bin/rbenv", register: ruby_rbenv_install_query, changed_when: no, failed_when: no, tags: [ruby] }
  - { name: "Ruby: rbenv: Run installer", command: "bin/rbenv-installer", when: "ruby_rbenv_install_query.rc > 0", tags: [ruby] }
  - { name: "Ruby: Check local installation", shell: "{{ ansible_env.HOME }}/.rbenv/bin/rbenv versions --bare | grep '^{{ ruby_version }}$'", register: ruby_install_query, changed_when: no, failed_when: no, tags: [ruby] }
  - { name: "Ruby: Compile & install local package", command: "{{ ansible_env.HOME }}/.rbenv/bin/rbenv install '{{ ruby_version }}'", when: "ruby_install_query.rc > 0", tags: [ruby] }
  - { name: "Ruby: Set default version", command: "{{ ansible_env.HOME }}/.rbenv/bin/rbenv global '{{ ruby_version }}'", changed_when: no, tags: [ruby] }

  # 300. etkkeeper
  - { name: "etckeeper: Install packages", become: yes, apt: { pkg: [etckeeper], state: present } }
  - { name: "etckeeper: Turn off Git signing", become: yes, lineinfile: { path: "/etc/etckeeper/etckeeper.conf", regexp: "^GIT_COMMIT_OPTIONS=", line: "GIT_COMMIT_OPTIONS=\"--no-gpg-sign\"" } }

  # 400. Neovim
  - { name: "Neovim: Install AppImage", get_url: { url: "https://github.com/neovim/neovim/releases/download/v{{ neovim_version }}/nvim.appimage", dest: "/usr/local/bin/nvim-{{ neovim_version }}", mode: "+x", checksum: "{{ neovim_checksum }}" }, tags: [vim, neovim] }
  # 410. Neovim Python support
  - { name: "Neovim: Add Python support", become: yes, pip: { executable: "{{ item }}", name: pynvim, state: present }, with_items: [pip2, pip3], tags: [vim, neovim] }
  # 420. Neovim alternatives
  - { name: "Neovim: Set up alternatives", become: yes, alternatives: { name: "{{ item }}", link: "/usr/local/bin/{{ item }}", path: "/usr/local/bin/nvim-{{ neovim_version }}" }, with_items: [vi, vim, nvim, editor], tags: [vim, neovim] }

  # 500. Docker
  - { name: "Docker: Install prerequisites", become: yes, apt: { pkg: [apt-transport-https, ca-certificates, curl, gnupg-agent, software-properties-common], state: present }, tags: [docker] }
  - { name: "Docker: Import GPG key", become: yes, apt_key: { id: "{{ docker_gpg_key_id }}", url: "https://download.docker.com/linux/ubuntu/gpg" }, tags: [docker] }
  - { name: "Docker: Add repository", become: yes, apt_repository: { repo: "deb [arch={{ docker_platform }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable", update_cache: yes }, tags: [docker] }
  - { name: "Docker: Install packages", become: yes, apt: { pkg: [docker-ce], state: present }, tags: [docker] }
  # 510. Docker Post-installation steps for Linux
  - { name: "Docker: Adding group", become: yes, group: { name: docker, state: present }, tags: [docker] }
  - { name: "Docker: Modifying user", become: yes, register: docker_user_groups, user: { name: "{{ ansible_user_id }}", append: yes, groups: [docker] }, tags: [docker] }
  - { debug: { msg: "*** NOTE: You MUST log out and in again for changes to take effect (needed by Docker). ***" }, when: docker_user_groups.changed, tags: [docker] }
  # 520. Docker Compose
  - { name: "Docker: Install Docker Compose", get_url: { url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-{{ ansible_system }}-{{ ansible_machine }}", dest: "/usr/local/bin/docker-compose-{{ docker_compose_version }}", mode: "+x", checksum: "{{ docker_compose_checksum }}" }, tags: [docker] }
  # 525. Docker Machine
  - { name: "Docker: Install Docker Machine", get_url: { url: "https://github.com/docker/machine/releases/download/v{{ docker_machine_version }}/docker-machine-{{ ansible_system }}-{{ ansible_machine }}", dest: "/usr/local/bin/docker-machine-{{ docker_machine_version }}", mode: "+x", checksum: "{{ docker_machine_checksum }}" }, tags: [docker] }
  - name: "Docker: Install drivers for Docker Machine"
    get_url:
      url: "{{ item.value.url | format(name=item.key, version=item.value.version) }}"
      dest: "{% if '.zip' == item.value.url[-4:] %}/tmp/docker-machine-driver-{{ item.key }}-{{ item.value.version }}.zip{% else %}/usr/local/bin/docker-machine-driver-{{ item.key }}-{{ item.value.version }}{% endif %}"
      mode: "{% if '.zip' == item.value.url[-4:] %}{{ omit }}{%                                                             else %}+x{%                                                                           endif %}"
      checksum: "{{ item.value.checksum }}"
    with_dict: "{{ docker_machine_drivers }}"
    when: "not ( '/usr/local/bin/docker-machine-driver-' + item.key + '-' + item.value.version ) is is_file"
    tags: [docker]
  - { name: "Docker: Unpack drivers for Docker Machine", shell: "cd /tmp && unzip -o 'docker-machine-driver-{{ item.key }}-{{ item.value.version }}.zip' && mv './docker-machine-driver-{{ item.key }}' '/usr/local/bin/docker-machine-driver-{{ item.key }}-{{ item.value.version }}'", with_dict: "{{ docker_machine_drivers }}", when: "not ( '/usr/local/bin/docker-machine-driver-' + item.key + '-' + item.value.version ) is is_file and '.zip' == item.value.url[-4:]", tags: [docker] }
  # 530. Docker alternatives
  - { name: "Docker: Set up alternatives", become: yes, alternatives: { name: "{{ item.name }}", link: "/usr/local/bin/{{ item.name }}", path: "/usr/local/bin/{{ item.name }}-{{ item.version }}" }, tags: [docker], with_items: "{%
        set alternatives = [
          { 'name': 'docker-compose', 'version': docker_compose_version },
          { 'name': 'docker-machine', 'version': docker_machine_version }
        ]
      %}{%
        for key, driver in docker_machine_drivers | dictsort
      %}{%
          set _ = alternatives.extend([ { 'name': 'docker-machine-driver-' + key, 'version': driver.version } ])
      %}{%
        endfor
      %}{{ alternatives }}" }

  # 550. GnuPG
  - { name: "GnuPG: Install packages", become: yes, apt: { pkg: [gnupg, gnupg-agent, pinentry-curses, pinentry-gnome3], state: present } }
  - { name: "GnuPG: Create directories", file: "{{ item }}", with_items: [
      { path: "{{ ansible_env.HOME }}/.gnupg", state: directory }
    ] }
  - name: "GnuPG: Configure GPG"
    lineinfile:
      create: yes
      path: "{{ ansible_env.HOME }}/.gnupg/gpg.conf"
      regexp: "^[#\\s]*{{ item.key }}\\b"
      line: "{{ ( item.key | string + ' ' + item.value | default('') | string ) | trim }}"
      insertafter: 'EOF'
    with_dict: "{{ gnupg_conf }}"
  - name: "GnuPG: Configure GPG agent"
    lineinfile:
      create: yes
      path: "{{ ansible_env.HOME }}/.gnupg/gpg-agent.conf"
      regexp: "^[#\\s]*{{ item.key }}\\b"
      line: "{{ ( item.key | string + ' ' + item.value | default('') | string ) | trim }}"
      insertafter: 'EOF'
    with_dict: "{{ gnupg_agent_conf }}"

  # 590. i3wm
  - { name: "i3: Add APT key", become: yes, apt_key: { file: "{{ ansible_env.PWD }}/keys/sur5r-keyring.gpg", id: 'E3CA1A89941C42E6', state: present }, tags: [i3] }
  - { name: "i3: Add repository", become: yes, apt_repository: { repo: "deb https://debian.sur5r.net/i3/ {{ ansible_distribution_release }} universe", update_cache: yes }, tags: [i3] }
  - { name: "i3: Install packages", become: yes, apt: { pkg: [i3], state: present }, tags: [i3] }

  # 600. Firefox
  - { name: "Firefox: Install packages", become: yes, apt: { pkg: "{{ ('firefox firefox-locale-' + firefox_locales|join(' firefox-locale-')).split(' ') }}", state: present }, tags: [firefox] }
  - { name: "Firefox: Install extras", become: yes, apt: { pkg: [fonts-lyx], state: present }, tags: [firefox] }
  # 610. Firefox alternatives
  - { name: "Firefox: Set up alternatives", become: yes, alternatives: { name: "{{ item }}", path: "/usr/bin/firefox" }, with_items: [gnome-www-browser, x-www-browser], tags: [firefox] }
  # 620. Firefox policy for enterprise deployments
  - { name: "Firefox: Create enterprise deployment directories", become: yes, file: { path: "{{ item }}", state: directory, owner: "{{ ansible_user_id }}", mode: 0755 }, tags: [firefox], with_items: [
      "/usr/lib/firefox/distribution",
      "/usr/lib/mozilla/certificates",
      "/usr/local/lib/firefox",
      "/usr/local/lib/firefox/extensions"
    ] }
  - { name: "Firefox: Create directories", file: "{{ item }}", tags: [firefox], with_items: [
      { path: "{{ ansible_env.HOME }}/bin", state: directory },
      { path: "{{ ansible_env.HOME }}/.mozilla", state: directory },
      { path: "{{ ansible_env.HOME }}/.mozilla/native-messaging-hosts", state: directory }
    ] }
  - { name: "Firefox: Download unofficial extensions", get_url: { url: "{{ item.value.url | format(version=item.value.version, commit=item.value.commit | default(omit)) }}", dest: "/usr/local/lib/firefox/extensions/{{ item.key }}-{{ item.value.version + (\"-\" + item.value.commit if \"commit\" in item.value else \"\") }}-unofficial.xpi", checksum: "{{ item.value.checksum }}" }, with_dict: "{{ firefox_unofficial_extensions }}", tags: [firefox] }
  - name: "Firefox: Download native messaging hosts"
    get_url:
      url: "{{ item.value.native.url | format(version=item.value.version, commit=item.value.commit | default(omit)) }}"
      dest: "{{ item.value.native.path | regex_replace('^~', ansible_env.HOME) }}"
      checksum: "{{ item.value.native.checksum }}"
      mode: "{{ item.value.native.mode | default(omit) }}"
    with_dict: "{{ firefox_unofficial_extensions }}"
    when: "'native' in item.value"
    tags: [firefox]
  - name: "Firefox: Create native messaging hosts manifests"
    copy:
      dest: "{{ ansible_env.HOME }}/.mozilla/native-messaging-hosts/{{ item.value.native.name }}.json"
      content: "{{ {
        \"name\": item.value.native.name,
        \"description\": item.value.native.description | default(\"\"),
        \"path\": item.value.native.path | regex_replace(\"^~\", ansible_env.HOME),
        \"type\": item.value.native.type | default(\"stdio\"),
        \"allowed_extensions\": (item.value.native.allowed_extensions | default([]) | join(\",\") | format(version=item.value.version, commit=item.value.commit | default(omit))).split(\",\")
      } | to_nice_json }}"
      owner: "{{ ansible_user_id }}"
      mode: 0444
      force: yes
    with_dict: "{{ firefox_unofficial_extensions }}"
    when: "'native' in item.value"
    tags: [firefox]
  - { name: "Firefox: Create enterprise deployment policy", become: yes, copy: { dest: "/usr/lib/firefox/distribution/policies.json", content: "{{ firefox_policies | to_nice_json }}", owner: "{{ ansible_user_id }}", mode: 0444, force: yes }, tags: [firefox] }
  - name: "Firefox: Setting up AutoConfig"
    become: yes
    tags: [firefox]
    copy:
      dest: "/usr/lib/firefox/defaults/pref/autoconfig.js"
      owner: "{{ ansible_user_id }}"
      mode: 0444
      force: yes
      content: |
        // This file is managed by Ansible / Longitude.
        pref("general.config.filename", "firefox.cfg");
        pref("general.config.obscure_value", 0);
  - name: "Firefox: Create AutoConfig"
    become: yes
    tags: [firefox]
    copy:
      dest: "/usr/lib/firefox/firefox.cfg"
      owner: "{{ ansible_user_id }}"
      mode: 0444
      force: yes
      content: |
        // This file is managed by Ansible / Longitude. NOTE: preferences MUST start on line 2.
        {% for name, value in firefox_about_config | dictsort %}
        lockPref({{ name | to_json }}, {{ value | to_json }});
        {% endfor %}

  # 650. Waterfox
  - { name: "Waterfox: Check installation", become: yes, command: "ls /opt/waterfox-classic-{{ waterfox_version }}", register: waterfox_install_query, changed_when: no, failed_when: no, tags: [waterfox] }
  - { name: "Waterfox: Download classic build", get_url: { url: "https://storage-waterfox.netdna-ssl.com/releases/{{ waterfox_release }}/installer/waterfox-classic-{{ waterfox_version }}.{{ waterfox_locale }}.{{ waterfox_platform }}.tar.bz2", dest: "/tmp/waterfox-classic-{{ waterfox_version }}.tar.bz2", checksum: "{{ waterfox_checksum }}" }, when: "waterfox_install_query.rc > 0", tags: [waterfox] }
  - { name: "Waterfox: Unpack & install packages", when: "waterfox_install_query.rc > 0",
      shell: "cd /tmp && tar --overwrite -jxf 'waterfox-classic-{{ waterfox_version }}.tar.bz2' && mv waterfox-classic '/opt/waterfox-classic-{{ waterfox_version }}'", tags: [waterfox] }
  - { name: "Waterfox: Set up alternatives", become: yes, alternatives: { name: "{{ item }}", link: "/usr/local/bin/{{ item }}", path: "/opt/waterfox-classic-{{ waterfox_version }}/{{ item }}" }, tags: [waterfox], with_items: [
      waterfox,
    ] }
  - name: "Waterfox: Add desktop icon"
    become: yes
    copy:
      dest: "/usr/share/applications/waterfox.desktop"
      content: |
        [Desktop Entry]
        Version={{ waterfox_version }}
        Name=Waterfox Web Browser
        Comment=Browse the World Wide Web
        GenericName=Web Browser
        Keywords=Internet;WWW;Browser;Web;Explorer
        Exec=/opt/waterfox-classic-{{ waterfox_version }}/waterfox %u
        Terminal=false
        X-MultipleArgs=false
        Type=Application
        Icon=/opt/waterfox-classic-{{ waterfox_version }}/browser/chrome/icons/default/default256.png
        Categories=GNOME;GTK;Network;WebBrowser;
        MimeType=text/html;text/xml;application/xhtml+xml;application/xml;application/rss+xml;application/rdf+xml;image/gif;image/jpeg;image/png;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/ftp;x-scheme-handler/chrome;video/webm;application/x-xpinstall;
        StartupNotify=true
        Actions=new-window;new-private-window;

        [Desktop Action new-window]
        Name=Open a New Window
        Exec=/opt/waterfox-classic-{{ waterfox_version }}/waterfox -new-window

        [Desktop Action new-private-window]
        Name=Open a New Private Window
        Exec=/opt/waterfox-classic-{{ waterfox_version }}/waterfox -private-window
    tags: [waterfox]

  # 660. Thunderbird
  - { name: "Thunderbird: Install prerequisites", become: yes, apt: { pkg: [xdg-utils, zenity], state: present }, tags: [thunderbird] }
  - { name: "Thunderbird: Check installation", become: yes, command: "ls /opt/thunderbird-{{ thunderbird_version.split('.')[0] }}", register: thunderbird_install_query, changed_when: no, failed_when: no, tags: [thunderbird] }
  - { name: "Thunderbird: Download packages", get_url: { url: "https://download-installer.cdn.mozilla.net/pub/thunderbird/releases/{{ thunderbird_version }}/{{ thunderbird_platform }}/{{ thunderbird_locale }}/thunderbird-{{ thunderbird_version }}.tar.bz2", dest: "/tmp/thunderbird-{{ thunderbird_version }}.tar.bz2", checksum: "{{ thunderbird_checksum }}" }, when: "thunderbird_install_query.rc > 0", tags: [thunderbird] }
  - { name: "Thunderbird: Unpack & install packages", when: "thunderbird_install_query.rc > 0",
      shell: "cd /tmp && tar --overwrite -jxf 'thunderbird-{{ thunderbird_version }}.tar.bz2' && mv thunderbird '/opt/thunderbird-{{ thunderbird_version.split('.')[0] }}'", tags: [thunderbird] }
  - name: "Thunderbird: Add desktop icon"
    become: yes
    copy:
      dest: "/usr/share/applications/thunderbird.desktop"
      owner: "{{ ansible_user_gid }}"
      group: "root"
      content: |
        [Desktop Entry]
        Encoding=UTF-8
        Name=Thunderbird Mail
        Comment=Send and receive mail with Thunderbird
        GenericName=Mail Client
        Keywords=Email;E-mail;Newsgroup;Feed;RSS
        Exec=/usr/bin/env GTK_THEME=Adwaita GDK_DPI_SCALE=1.25 /opt/thunderbird-{{ thunderbird_version.split('.')[0] }}/thunderbird %u
        Terminal=false
        X-MultipleArgs=false
        Type=Application
        Icon=/opt/thunderbird-{{ thunderbird_version.split('.')[0] }}/chrome/icons/default/default256.png
        Categories=Application;Network;Email;
        MimeType=x-scheme-handler/mailto;application/x-xpinstall;
        StartupNotify=true
        Actions=Compose;Contacts

        [Desktop Action Compose]
        Name=Compose New Message
        Exec=/usr/bin/env GTK_THEME=Adwaita GDK_DPI_SCALE=1.25 /opt/thunderbird-{{ thunderbird_version.split('.')[0] }}/thunderbird -compose
        OnlyShowIn=Messaging Menu;Unity;

        [Desktop Action Contacts]
        Name=Contacts
        Exec=/usr/bin/env GTK_THEME=Adwaita GDK_DPI_SCALE=1.25 /opt/thunderbird-{{ thunderbird_version.split('.')[0] }}/thunderbird -addressbook
        OnlyShowIn=Messaging Menu;Unity;
    tags: [thunderbird]
  - { name: "Thunderbird: Check MIME handler", command: 'xdg-mime query default x-scheme-handler/mailto', register: thunderbird_mime_query_1, changed_when: no, failed_when: no, tags: [thunderbird] }
  - { name: "Thunderbird: Set as MIME handler", when: "(thunderbird_mime_query_1.rc == 0) and ('thunderbird.desktop' not in thunderbird_mime_query_1.stdout)", command: "xdg-mime default thunderbird.desktop x-scheme-handler/mailto", tags: [thunderbird] }
  - { name: "Birdtray: Install prerequisites", become: yes, apt: { pkg: [libqt5core5a, libqt5gui5, libqt5widgets5, libqt5network5, libqt5svg5, libqt5x11extras5, qt5-gtk-platformtheme], state: present }, tags: [birdtray, thunderbird] }
  - { name: "Birdtray: Check installation", become: yes, command: "ls /usr/local/bin/birdtray-{{ birdtray_version }}", register: birdtray_install_query, changed_when: no, failed_when: no, tags: [birdtray, thunderbird] }
  - { name: "Birdtray: Download package and signature", get_url: { url: "{{ item }}", dest: "/tmp/{{ item | basename }}" }, when: "birdtray_install_query.rc > 0", tags: [birdtray, thunderbird], with_items: [
      "https://dl.bintray.com/stanangeloff/Birdtray/birdtray-{{ birdtray_version }}_{{ birdtray_platform }}.tar.xz",
      "https://dl.bintray.com/stanangeloff/Birdtray/birdtray-{{ birdtray_version }}_{{ birdtray_platform }}.tar.xz.asc"
    ] }
  - { name: "Birdtray: Check package signature", command: "gpg --status-fd 1 --no-default-keyring --keyring '{{ ansible_env.PWD }}/keys/bintray-public.key.asc.gpg' --verify /tmp/birdtray-{{ birdtray_version }}_{{ birdtray_platform }}.tar.xz.asc", when: "birdtray_install_query.rc > 0", tags: [birdtray, thunderbird] }
  - name: "Birdtray: Compile & install packages"
    when: "birdtray_install_query.rc > 0"
    shell: |
      cd /tmp &&
      tar --overwrite -Jxf 'birdtray-{{ birdtray_version }}_{{ birdtray_platform }}.tar.xz' &&
      cd 'birdtray-{{ birdtray_version }}' &&
      cp bin/birdtray /usr/local/bin/birdtray-{{ birdtray_version }} &&
      cp -R share/* /usr/local/share/
    args: { executable: "/bin/bash" }
    tags: [birdtray, thunderbird]
  - { name: "Birdtray: Set up alternatives", become: yes, alternatives: { name: "birdtray", link: "/usr/local/bin/birdtray", path: "/usr/local/bin/birdtray-{{ birdtray_version }}" }, tags: [birdtray, thunderbird] }
  - name: "Birdtray: Update settings"
    json_patch:
      src: "{{ ansible_env.HOME }}/.config/birdtray-config.json"
      create: yes
      pretty: yes
      operations:
        # See https://tools.ietf.org/html/rfc6901
        - { op: replace, path: "advanced~1tbcmdline", value: ["/usr/bin/env", "GTK_THEME=Adwaita", "GDK_DPI_SCALE=1.25", "/opt/thunderbird-{{ thunderbird_version.split('.')[0] }}/thunderbird"] }
    tags: [birdtray, thunderbird]

  # 700. Dropbox
  - { name: "Dropbox: Install prerequisites", become: yes, apt: { pkg: [python-gpgme, python3-gpgme], state: present }, when: "ansible_distribution_version is version('17.10', '<')" }
  - { name: "Dropbox: Install prerequisites", become: yes, apt: { pkg: [python-gpg, python3-gpg], state: present }, when: "ansible_distribution_version is version('17.10', '>=')" }
  - { name: "Dropbox: Check installation", become: yes, shell: "{{ dpkg_query | format('dropbox') }}", register: dropbox_dpkg_query, changed_when: no, failed_when: no }
    # NOTE: I don't know of a way to verify the .deb Dropbox package, is there an alternative way to install, perhaps via an APT repository?
  - { name: "Dropbox: Install packages", become: yes, when: "dropbox_dpkg_query.rc > 0", apt: { deb: "https://www.dropbox.com/download?dl=packages/ubuntu/dropbox_{{ dropbox_version }}_{{ dropbox_platform }}.deb", state: present } }

  # 750. Keybase
  - { name: "Keybase: Install prerequisites", become: yes, apt: { pkg: [gnupg, curl], state: present }, tags: [keybase] }
  - { name: "Keybase: Check installation", become: yes, shell: "{{ dpkg_query | format('keybase') }}", register: keybase_dpkg_query, changed_when: no, failed_when: no, tags: [keybase] }
  - { name: "Keybase: Download package and signature", get_url: { url: "{{ item }}", dest: "/tmp/{{ item | basename }}" }, when: "keybase_dpkg_query.rc > 0", tags: [keybase], with_items: [
      "https://prerelease.keybase.io/keybase_{{ keybase_platform }}.deb",
      "https://prerelease.keybase.io/keybase_{{ keybase_platform }}.deb.sig"
    ] }
  - { name: "Keybase: Check package signature", command: "gpg --status-fd 1 --no-default-keyring --keyring '{{ ansible_env.PWD }}/keys/keybase-20190624.asc.gpg' --verify /tmp/keybase_{{ keybase_platform }}.deb.sig", when: "keybase_dpkg_query.rc > 0", tags: [keybase] }
  - { name: "Keybase: Install package", become: yes, apt: { deb: "/tmp/keybase_{{ keybase_platform }}.deb", state: present }, when: "keybase_dpkg_query.rc > 0", tags: [keybase] }

  # 760. Tarsnap
  - { name: "Tarsnap: Install prerequisites", become: yes, apt: { pkg: [gcc, libc6-dev, make, libssl-dev, zlib1g-dev, e2fslibs-dev], state: present }, tags: [tarsnap] }
  - { name: "Tarsnap: Check installation", become: yes, command: "ls /opt/tarsnap-{{ tarsnap_version }}", register: tarsnap_install_query, changed_when: no, failed_when: no, tags: [tarsnap] }
  - { name: "Tarsnap: Download package and signature", get_url: { url: "{{ item }}", dest: "/tmp/{{ item | basename }}" }, when: "tarsnap_install_query.rc > 0", tags: [tarsnap], with_items: [
      "https://www.tarsnap.com/download/tarsnap-autoconf-{{ tarsnap_version }}.tgz",
      "https://www.tarsnap.com/download/tarsnap-sigs-{{ tarsnap_version }}.asc"
    ] }
  - { name: "Tarsnap: Check package signature", command: "gpg --status-fd 1 --no-default-keyring --keyring '{{ ansible_env.PWD }}/keys/tarsnap-signing-key-2020.asc.gpg' --verify /tmp/tarsnap-sigs-{{ tarsnap_version }}.asc", when: "tarsnap_install_query.rc > 0", tags: [tarsnap] }
  - name: "Tarsnap: Compile & install packages"
    when: "tarsnap_install_query.rc > 0"
    shell: |
      cd /tmp &&
      tar --overwrite -zxf 'tarsnap-autoconf-{{ tarsnap_version }}.tgz' &&
      cd 'tarsnap-autoconf-{{ tarsnap_version }}' &&
      ./configure --prefix='/opt/tarsnap-{{ tarsnap_version }}' &&
      make all && make install
    args: { executable: "/bin/bash" }
    tags: [tarsnap]
  - { name: "Tarsnap: Set up alternatives", become: yes, alternatives: { name: "{{ item }}", link: "/usr/local/bin/{{ item }}", path: "/opt/tarsnap-{{ tarsnap_version }}/bin/{{ item }}" }, tags: [tarsnap], with_items: [
      tarsnap,
      tarsnap-keygen,
      tarsnap-keymgmt,
      tarsnap-keyregen,
      tarsnap-recrypt
    ] }

  # 900. Tools and miscellaneous
  #
  - { name: "Miscellaneous: Install packages", become: yes, apt: { pkg: "{{ lookup('file', 'apt.present.txt').splitlines() | map('regex_replace', '#.*$', '') | map('trim') | select('regex', '.') | list }}", state: present } }
  - { name: "Miscellaneous: Add Python support for dconf", become: yes, pip: { executable: pip2, name: psutil, state: present } }
  - { name: "Miscellaneous: Configure the system", dconf: "{{ item }}", when: "ansible_env.IS_DOCKERIZED | default(0) != '1'", tags: [dconf], with_items: [
      # Disable the Meta (Win) key from opening the Activities overview in Gnome Shell:
      { key: "/org/gnome/mutter/overlay-key", value: "''" },
      # Use different input sources for each window:
      { key: "/org/gnome/desktop/input-sources/per-window", value: "true" },
      # List of XKB options:
      #
      # Each option is an XKB option string as defined by xkeyboard-config’s rules files.
      # See http://manpages.ubuntu.com/manpages/trusty/man7/xkeyboard-config.7.html
      #
      # - Switching to another layout: Caps Lock (grp:caps_toggle); Mata+Space (grp:win_space_toggle)
      # - Use keyboard LED to show alternative layout: Caps Lock (grp_led:caps)
      # - Position of Compose key: Right Alt (compose:ralt)
      #
      { key: "/org/gnome/desktop/input-sources/xkb-options", value: "['grp:caps_toggle', 'grp_led:caps', 'grp:win_space_toggle', 'compose:ralt']" },
      # See https://github.com/GNOME/gsettings-desktop-schemas/blob/3.36.0/schemas/org.gnome.desktop.peripherals.gschema.xml.in#L69
      { key: "/org/gnome/desktop/peripherals/keyboard/repeat-interval", value: "uint32 18" },
      { key: "/org/gnome/desktop/peripherals/keyboard/delay", value: "uint32 200" },
    ] }
  # When using the Logitech MX Keys keyboard, the key to the left of 'Z' should act as a backslash/bar.
  - name: "Miscellaneous: Update English (US) keyboard layout"
    become: yes
    lineinfile:
      create: no
      path: "/usr/share/X11/xkb/symbols/us"
      regexp: "^\\s*key\\s+<LSGT>.*\\/\\/ Logitech MX Keys$"
      line: "    key <LSGT> { [ backslash, bar, backslash, bar ] }; // Logitech MX Keys"
      insertafter: "\"English \\(US\\)\""
      firstmatch: yes
    tags: [xkb]
  - { name: "Miscellaneous: Create directories", file: "{{ item }}", with_items: [
      { path: "{{ ansible_env.HOME }}/.config/fontconfig", state: directory },
      { path: "{{ ansible_env.HOME }}/.config/fontconfig/conf.d", state: directory }
    ] }
  - { name: "Miscellaneous: Clean up legacy configuration", file: { path: "{{ ansible_env.HOME }}/.config/fontconfig/conf.d/10-calibri.conf", state: absent }, tags: [fonts] }
  - name: "Miscellaneous: Configure fonts"
    copy:
      dest: "{{ ansible_env.HOME }}/.config/fontconfig/conf.d/10-ms-ttf-fonts.conf"
      force: no
      content: |
        <?xml version="1.0"?>
        <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
        <fontconfig>
            <match target="font">
                <test name="family" compare="contains">
                    <string>Calibri</string>
                </test>
                <edit name="embeddedbitmap">
                    <bool>false</bool>
                </edit>
            </match>
            <match target="font">
                <test name="family" compare="contains">
                    <string>Cambria</string>
                </test>
                <edit name="embeddedbitmap">
                    <bool>false</bool>
                </edit>
            </match>
        </fontconfig>
    tags: [fonts]
  - { name: "GDM3: Check if service installed", stat: { path: "/etc/gdm3/custom.conf" }, register: gdm_custom_stat, tags: [gdm] }
  - { name: "GDM3: Disable Waywand", become: yes, ini_file: { path: "/etc/gdm3/custom.conf", no_extra_spaces: true, section: "daemon", option: "WaylandEnable", value: "false", state: present }, when: gdm_custom_stat.stat.exists, tags: [gdm] }

  # 910. ImageMagick
  - { name: "ImageMagick: Install prerequisites", become: yes, apt: { pkg: [graphviz-dev, libpng-dev, libjpeg-dev, libgs-dev], state: present } }
  - { name: "ImageMagick: Check installation", become: yes, command: "ls /opt/ImageMagick-{{ imagemagick_version }}", register: imagemagick_install_query, changed_when: no, failed_when: no }
  - { name: "ImageMagick: Download source", get_url: { url: "http://download.ubk.hu/src/imagemagick/ImageMagick-{{ imagemagick_version }}.tar.xz", dest: "/tmp/ImageMagick-{{ imagemagick_version }}.tar.xz", checksum: "{{ imagemagick_checksum }}" }, when: "imagemagick_install_query.rc > 0" }
  - { name: "ImageMagick: Compile & install packages", when: "imagemagick_install_query.rc > 0",
      shell: "cd /tmp && tar --overwrite -Jxf 'ImageMagick-{{ imagemagick_version }}.tar.xz' && cd 'ImageMagick-{{ imagemagick_version }}' && ./configure --prefix='/opt/ImageMagick-{{ imagemagick_version }}' && make -j8 && make install" }
  - { name: "ImageMagick: Set up alternatives", become: yes, alternatives: { name: "{{ item }}", link: "/usr/local/bin/{{ item }}", path: "/opt/ImageMagick-{{ imagemagick_version }}/bin/{{ item }}" }, with_items: [
      animate,
      compare,
      composite,
      conjure,
      convert,
      display,
      identify,
      import,
      magick,
      magick-script,
      mogrify,
      montage,
      stream,

      Magick++-config,
      MagickCore-config,
      MagickWand-config
    ] }
  - { name: "ImageMagick: Check system installation", become: yes, command: "apt-mark showhold", register: imagemagick_system_install_query, changed_when: no, failed_when: no }
  - { name: "ImageMagick: Hold system packages", become: yes, when: "'imagemagick' not in imagemagick_system_install_query.stdout", command: "apt-mark hold imagemagick" }
  - { name: "ImageMagick: Allow manipulation of PDF files", lineinfile: { path: "/opt/ImageMagick-{{ imagemagick_version }}/etc/ImageMagick-{{ imagemagick_version.split('.')[0] }}/policy.xml", regexp: "PDF", line: '  <policy domain="module" rights="read|write" pattern="{PS,PDF,XPS}" />' } }

  # 920. youtube-dl
  - { name: "youtube-dl: Install script", get_url: { url: "https://github.com/ytdl-org/youtube-dl/releases/download/{{ youtube_dl_version }}/youtube-dl", dest: "/usr/local/bin/youtube-dl", mode: "+x", checksum: "{{ youtube_dl_checksum }}" }, tags: [youtube, youtube-dl] }

  # 940. fd
  - { name: "fd: Check installation", become: yes, shell: "{{ dpkg_query | format('fd') }}", register: fd_dpkg_query, changed_when: no, failed_when: no, tags: [fd] }
  - { name: "fd: Download packages", get_url: { url: "https://github.com/sharkdp/fd/releases/download/v{{ fd_version }}/fd_{{ fd_version }}_{{ fd_platform }}.deb", dest: "/tmp/fd-{{ fd_version }}.deb", checksum: "{{ fd_checksum }}" }, when: "fd_dpkg_query.rc > 0", tags: [fd] }
  - { name: "fd: Install packages", become: yes, apt: { deb: "/tmp/fd-{{ fd_version }}.deb", state: present }, when: "fd_dpkg_query.rc > 0", tags: [fd] }
  # 950. ripgrep
  - { name: "ripgrep: Check installation", become: yes, shell: "{{ dpkg_query | format('ripgrep') }}", register: ripgrep_dpkg_query, changed_when: no, failed_when: no, tags: [ripgrep] }
  - { name: "ripgrep: Download packages", get_url: { url: "https://github.com/BurntSushi/ripgrep/releases/download/{{ ripgrep_version }}/ripgrep_{{ ripgrep_version }}_{{ ripgrep_platform }}.deb", dest: "/tmp/ripgrep-{{ ripgrep_version }}.deb", checksum: "{{ ripgrep_checksum }}" }, when: "ripgrep_dpkg_query.rc > 0", tags: [ripgrep] }
  - { name: "ripgrep: Install packages", become: yes, apt: { deb: "/tmp/ripgrep-{{ ripgrep_version }}.deb", state: present }, when: "ripgrep_dpkg_query.rc > 0", tags: [ripgrep] }
  # 955. fzf
  - { name: "fzf: Check installation", become: yes, command: "ls /usr/local/bin/fzf-{{ fzf_version }}", register: fzf_install_query, changed_when: no, failed_when: no, tags: [fzf] }
  - { name: "fzf: Download fzf", get_url: { url: "https://github.com/junegunn/fzf/releases/download/{{ fzf_version }}/fzf-{{ fzf_version }}-{{ fzf_platform }}.tar.gz", dest: "/tmp/fzf-{{ fzf_version }}.tar.gz", checksum: "{{ fzf_checksum }}" }, when: "fzf_install_query.rc > 0", tags: [fzf] }
  - { name: "fzf: Install fzf", shell: "cd /tmp && tar --overwrite -zxf 'fzf-{{ fzf_version }}.tar.gz' && mv ./fzf '/usr/local/bin/fzf-{{ fzf_version }}'", when: "fzf_install_query.rc > 0", tags: [fzf] }
  - { name: "fzf: Set up alternatives", become: yes, alternatives: { name: "fzf", link: "/usr/local/bin/fzf", path: "/usr/local/bin/fzf-{{ fzf_version }}" }, tags: [fzf] }
  - { name: "fzf: Create empty Zsh configuration", copy: { content: "", dest: "{{ ansible_env.HOME }}/.fzf.zsh", force: no }, tags: [fzf] }
  # 960. pup
  - { name: "pup: Check installation", become: yes, command: "ls /usr/local/bin/pup-{{ pup_version }}", register: pup_install_query, changed_when: no, failed_when: no }
  - { name: "pup: Download pup", get_url: { url: "https://github.com/EricChiang/pup/releases/download/v{{ pup_version }}/pup_v{{ pup_version }}_{{ pup_platform }}.zip", dest: "/tmp/pup-{{ pup_version }}.zip", checksum: "{{ pup_checksum }}" }, when: "pup_install_query.rc > 0" }
  - { name: "pup: Install pup", shell: "cd /tmp && unzip -o 'pup-{{ pup_version }}.zip' && mv ./pup '/usr/local/bin/pup-{{ pup_version }}'", when: "pup_install_query.rc > 0" }
  - { name: "pup: Set up alternatives", become: yes, alternatives: { name: "pup", link: "/usr/local/bin/pup", path: "/usr/local/bin/pup-{{ pup_version }}" } }
  # 965. jq
  - { name: "jq: Check installation", become: yes, command: "ls /usr/local/bin/jq-{{ jq_version }}", register: jq_install_query, changed_when: no, failed_when: no }
  - { name: "jq: Download jq", get_url: { url: "https://github.com/stedolan/jq/releases/download/jq-{{ jq_version }}/jq-{{ jq_platform }}", dest: "/usr/local/bin/jq-{{ jq_version }}", mode: "+x", checksum: "{{ jq_checksum }}" }, when: "jq_install_query.rc > 0" }
  - { name: "jq: Set up alternatives", become: yes, alternatives: { name: "jq", link: "/usr/local/bin/jq", path: "/usr/local/bin/jq-{{ jq_version }}" } }
  # 970. HTTPie
  - { name: "HTTPie: Install packages", pip: { executable: "pip{{ python_version.split('.')[:2]|join('.') }}", extra_args: '--user', name: httpie, version: "{{ httpie_version }}", state: present }, tags: [httpie] }
  - { name: "HTTPie: Install plug-ins", pip: { executable: "pip{{ python_version.split('.')[:2]|join('.') }}", extra_args: '--user', name: "{{ item.name }}", version: "{{ item.version }}", state: present }, tags: [httpie], with_items: "{{ httpie_plugins }}" }
  # 980. bat
  - { name: "bat: Check installation", become: yes, shell: "{{ dpkg_query | format('bat') }}", register: bat_dpkg_query, changed_when: no, failed_when: no, tags: [bat] }
  - { name: "bat: Download packages", get_url: { url: "https://github.com/sharkdp/bat/releases/download/v{{ bat_version }}/bat_{{ bat_version }}_{{ bat_platform }}.deb", dest: "/tmp/bat-{{ bat_version }}.deb", checksum: "{{ bat_checksum }}" }, when: "bat_dpkg_query.rc > 0", tags: [bat] }
  - { name: "bat: Install packages", become: yes, apt: { deb: "/tmp/bat-{{ bat_version }}.deb", state: present }, when: "bat_dpkg_query.rc > 0", tags: [bat] }
  # 981. delta
  - { name: "git-delta: Check installation", become: yes, shell: "{{ dpkg_query | format('git-delta') }}", register: delta_dpkg_query, changed_when: no, failed_when: no, tags: [git, delta, git-delta] }
  - { name: "git-delta: Download packages", get_url: { url: "https://github.com/dandavison/delta/releases/download/{{ delta_version }}/git-delta_{{ delta_version }}_{{ delta_platform }}.deb", dest: "/tmp/git-delta_{{ delta_version }}.deb", checksum: "{{ delta_checksum }}" }, when: "delta_dpkg_query.rc > 0", tags: [git, delta, git-delta] }
  - { name: "git-delta: Install packages", become: yes, apt: { deb: "/tmp/git-delta_{{ delta_version }}.deb", state: present }, when: "delta_dpkg_query.rc > 0", tags: [git, delta, git-delta] }
  # 985. xidel
  - { name: "Xidel: Check installation", become: yes, shell: "{{ dpkg_query | format('xidel') }}", register: xidel_dpkg_query, changed_when: no, failed_when: no }
  - { name: "Xidel: Download packages", get_url: { url: "https://sourceforge.net/projects/videlibri/files/Xidel/Xidel%20{{ xidel_version.split('-')[0] }}/xidel_{{ xidel_version }}_{{ xidel_platform }}.deb/download", dest: "/tmp/xidel-{{ xidel_version }}.deb", checksum: "{{ xidel_checksum }}" }, when: "xidel_dpkg_query.rc > 0" }
  - { name: "Xidel: Install packages", become: yes, apt: { deb: "/tmp/xidel-{{ xidel_version }}.deb", state: present }, when: "xidel_dpkg_query.rc > 0" }
  # 990. ngrok
  - { name: "ngrok: Check installation", become: yes, command: "ls /usr/local/bin/ngrok", register: ngrok_install_query, changed_when: no, failed_when: no }
  - { name: "ngrok: Download ngrok", get_url: { url: "https://bin.equinox.io/a/{{ ngrok_stable_channel_id }}/ngrok-{{ ngrok_version }}-{{ ngrok_platform }}.zip", dest: "/tmp/ngrok.zip", checksum: "{{ ngrok_checksum }}" }, when: "ngrok_install_query.rc > 0" }
  - { name: "ngrok: Install ngrok", shell: "cd /tmp && unzip -o ngrok.zip && mv ./ngrok /usr/local/bin/ngrok", when: "ngrok_install_query.rc > 0" }
  # 996. Magic Wormhole
  - { name: "Magic Wormhole: Install prerequisites", become: yes, apt: { pkg: [libffi-dev], state: present }, tags: [wormhole] }
  - { name: "Magic Wormhole: Install package", pip: { executable: "pip{{ python_version.split('.')[:2]|join('.') }}", extra_args: '--user', name: magic-wormhole, state: present }, tags: [wormhole] }
  # 997. Terraform & plug-ins
  - { name: "Terraform: Check installation", become: yes, command: "ls '/opt/terraform-{{ terraform_version }}/bin/terraform'", register: terraform_install_query, changed_when: no, failed_when: no, tags: [terraform] }
  - { name: "Terraform: Download package", get_url: { url: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_{{ terraform_platform }}.zip", dest: "/tmp/terraform.zip", checksum: "{{ terraform_checksum }}" }, when: "terraform_install_query.rc > 0", tags: [terraform] }
  - { name: "Terraform: Install package", shell: "cd /tmp && unzip -o terraform.zip && mkdir -p '/opt/terraform-{{ terraform_version }}/bin' && mv ./terraform '/opt/terraform-{{ terraform_version }}/bin/terraform'", when: "terraform_install_query.rc > 0", tags: [terraform] }
  - { name: "Terraform: Set up alternatives", become: yes, alternatives: { name: "terraform", link: "/usr/local/bin/terraform", path: "/opt/terraform-{{ terraform_version }}/bin/terraform" }, tags: [terraform] }
  - { name: "Terraform: Set up plug-ins directories", file: { path: "{{ item }}", state: directory }, tags: [terraform], with_items: [
      "{{ ansible_env.HOME }}/.terraform.d",
      "{{ ansible_env.HOME }}/.terraform.d/plugins",
    ] }
  - name: "Terraform: Download plug-ins"
    get_url:
      url: "{{ item.value.url | format(name=item.key, version=item.value.version, platform=terraform_platform) }}"
      dest: "{{ ansible_env.HOME }}/.terraform.d/plugins/{{ item.key }}_v{{ item.value.version }}"
      mode: '+x'
      checksum: "{{ item.value.checksum }}"
    with_dict: "{{ terraform_plugins }}"
    tags: [terraform]

  # 999. AWS CLI, s3cmd, etc.
  - { name: "AWS: Install CLI packages", pip: { executable: "pip{{ python_version.split('.')[:2]|join('.') }}", extra_args: '--user', name: awscli, version: "{{ awscli_version }}", state: present }, tags: [aws, awscli] }
  - { name: "AWS: Install community s3cmd package", pip: { executable: "pip{{ python_version.split('.')[:2]|join('.') }}", extra_args: '--user', name: s3cmd, version: "{{ s3cmd_version }}", state: present }, tags: [aws, awscli, s3cmd] }

  # 1000. Dotfiles
  - { name: "Dotfiles: Clone the repository", git: { repo: "https://github.com/StanAngeloff/dotfiles.git", dest: "{{ ansible_env.HOME }}/dotfiles", remote: "github", update: no }, tags: [dotfiles] }
  # 1010. Dotfiles linking files
  - { name: "Dotfiles: Creating directories and linking files", file: "{{ item }}", tags: [dotfiles], with_items: [
      { path: "{{ ansible_env.HOME }}/.vim", src: "./dotfiles/.vim", state: link, force: yes },
      { path: "{{ ansible_env.HOME }}/.config/nvim", src: "../.vim", state: link, force: yes },
      { path: "{{ ansible_env.HOME }}/.urxvt", src: "./dotfiles/.urxvt", state: link, force: yes },
      { path: "{{ ansible_env.HOME }}/.zsh", src: "./dotfiles/.zsh", state: link, force: yes },

      { path: "{{ ansible_env.HOME }}/.vim/autoload", state: directory },

      { path: "{{ ansible_env.HOME }}/.local", state: directory },
      { path: "{{ ansible_env.HOME }}/.local/share", state: directory },
      { path: "{{ ansible_env.HOME }}/.local/share/applications", state: directory },
      { path: "{{ ansible_env.HOME }}/.local/share/icons", state: directory },

      { path: "{{ ansible_env.HOME }}/.bat.conf", src: "{{ ansible_env.HOME }}/dotfiles/.bat.conf", state: hard, force: yes },
      { path: "{{ ansible_env.HOME }}/.vimrc", src: "{{ ansible_env.HOME }}/dotfiles/.vimrc", state: hard, force: yes },
      { path: "{{ ansible_env.HOME }}/.config/nvim/init.vim", src: "{{ ansible_env.HOME }}/.vimrc", state: hard, force: yes },
      { path: "{{ ansible_env.HOME }}/.gitconfig", src: "{{ ansible_env.HOME }}/dotfiles/.gitconfig", state: hard, force: yes }, # NOTE: See https://stackoverflow.com/q/11786623
      { path: "{{ ansible_env.HOME }}/.rgrc", src: "{{ ansible_env.HOME }}/dotfiles/.rgrc", state: hard, force: yes },
      { path: "{{ ansible_env.HOME }}/.tigrc", src: "{{ ansible_env.HOME }}/dotfiles/.tigrc", state: hard, force: yes },
      { path: "{{ ansible_env.HOME }}/.tigrc.vim", src: "{{ ansible_env.HOME }}/dotfiles/.tigrc.vim", state: hard, force: yes },
      { path: "{{ ansible_env.HOME }}/.tmux.conf", src: "{{ ansible_env.HOME }}/dotfiles/.tmux.conf", state: hard, force: yes },
      { path: "{{ ansible_env.HOME }}/.zshrc", src: "{{ ansible_env.HOME }}/dotfiles/.zshrc", state: hard, force: yes },
      { path: "{{ ansible_env.HOME }}/.Xresources", src: "{{ ansible_env.HOME }}/dotfiles/.Xresources", state: hard, force: yes },
    ] }
  # 1020. Dotfiles install Vim plug-ins
  - { name: "Dotfiles: Install vim-plug", get_url: { url: "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim", dest: "{{ ansible_env.HOME }}/.vim/autoload/plug.vim" }, register: vim_plug_installed, tags: [dotfiles] }
  - { name: "Dotfiles: Disable Git fsckObjects", command: "git config --global fetch.fsckObjects false", changed_when: no, tags: [dotfiles] }
  - { name: "Dotfiles: Download Vim dictionaries", get_url: { url: "http://ftp.vim.org/vim/runtime/spell/{{ item[0] }}.{{ item[1] }}", dest: "{{ ansible_env.HOME }}/.config/nvim/spell/{{ item[0] }}.{{ item[1] }}" }, tags: [dotfiles], with_nested: [
      ["{{ neovim_dictionaries }}"],
      [spl, sug]
    ] }
  - { name: "Dotfiles: Install Vim plug-ins", command: "nvim -Es -u {{ ansible_env.HOME }}/.config/nvim/init.vim +PlugInstall +qa", when: vim_plug_installed.changed, failed_when: no, tags: [dotfiles] }
  - { name: "Dotfiles: Re-enable Git fsckObjects", command: "git config --global fetch.fsckObjects true", changed_when: no, tags: [dotfiles] }

  # 1100. Zsh
  - { name: "Zsh: Install prerequisites", become: yes, apt: { pkg: [libncurses-dev], state: present }, tags: [zsh] }
  - { name: "Zsh: Check installation", become: yes, command: "ls /opt/zsh-{{ zsh_version }}", register: zsh_install_query, changed_when: no, failed_when: no, tags: [zsh] }
  - { name: "Zsh: Download source", get_url: { url: "https://sourceforge.net/projects/zsh/files/zsh/{{ zsh_version }}/zsh-{{ zsh_version }}.tar.xz/download", dest: "/tmp/zsh-{{ zsh_version }}.tar.xz", checksum: "{{ zsh_checksum }}" }, when: "zsh_install_query.rc > 0", tags: [zsh] }
  - { name: "Zsh: Compile & install packages", when: "zsh_install_query.rc > 0",
      shell: "cd /tmp && tar --overwrite -Jxf 'zsh-{{ zsh_version }}.tar.xz' && cd 'zsh-{{ zsh_version }}' && ./configure --enable-pcre --prefix='/opt/zsh-{{ zsh_version }}' {% if ansible_env.IS_DOCKERIZED | default(0) == '1' %} --without-tcsetpgrp {% endif %} && make -j8 && make install", tags: [zsh] }
  - { name: "Zsh: Set up alternatives", become: yes, alternatives: { name: "zsh", link: "/bin/zsh", path: "/opt/zsh-{{ zsh_version }}/bin/zsh" }, tags: [zsh] }
  - { name: "Zsh: Add to /etc/shells", become: yes, lineinfile: { path: "/etc/shells", line: "/bin/zsh" }, tags: [zsh] }
  - { name: "Zsh: Check shell", become: yes, shell: "cat /etc/passwd | grep '^{{ ansible_user_id }}:' | cut -d: -f7", register: zsh_shell_query, changed_when: no, tags: [zsh] }
  - { name: "Zsh: Change shell", become: yes, command: "chsh -s /bin/zsh '{{ ansible_user_id }}'", when: "zsh_shell_query.stdout != '/bin/zsh'", tags: [zsh] }

  - { name: "Reset connection to allow shell changes", meta: reset_connection }

  # 1200. rxvt-unicode
  - { name: "rxvt-unicode: Install prerequisites", become: yes, apt: { pkg: [cvs, libperl-dev, libx11-dev, libxft-dev, xdotool, xsel], state: present }, tags: [rxvt, urxvt] }
  - { name: "rxvt-unicode: Check installation", become: yes, command: "ls /opt/rxvt-unicode-{{ rxvt_unicode_version }}", register: rxvt_unicode_install_query, changed_when: no, failed_when: no, tags: [rxvt, urxvt] }
  - { name: "rxvt-unicode: Download CVS source", command: "cvs -q -z3 -d :pserver:anonymous@cvs.schmorp.de/schmorpforge checkout -D \"{{ rxvt_unicode_cvs_date }}\" rxvt-unicode", args: { chdir: '/tmp' }, when: "rxvt_unicode_install_query.rc > 0", tags: [rxvt, urxvt] }
  - { name: "rxvt-unicode: Download patches", get_url: { url: "{{ item.1.url }}", dest: "/tmp/rxvt-unicode-{{ item.0 }}.patch", checksum: "{{ item.1.checksum }}" }, with_indexed_items: "{{ rxvt_unicode_patches }}", when: "rxvt_unicode_install_query.rc > 0", tags: [rxvt, urxvt] }
  - name: "rxvt-unicode: Patch, compile & install packages"
    when: "rxvt_unicode_install_query.rc > 0"
    shell: |
      cd /tmp/rxvt-unicode &&
      {% for patch in rxvt_unicode_patches %}
        echo "Patching {{ patch.url | basename }}…"  &&
        patch --quiet --forward -p{{ patch.strip | default(0) }} < "/tmp/rxvt-unicode-{{ loop.index0 }}.patch" &&
      {% endfor %}
      ./configure {{ rxvt_unicode_configure_args | join(" ") }} --prefix="/opt/rxvt-unicode-{{ rxvt_unicode_version }}" &&
      make -j8 &&
      make install
    args: { executable: "/bin/bash" }
    tags: [rxvt, urxvt]
  - { name: "rxvt-unicode: Set up alternatives", become: yes, alternatives: { name: "{{ item }}", link: "/usr/local/bin/{{ item }}", path: "/opt/rxvt-unicode-{{ rxvt_unicode_version }}/bin/{{ item }}" }, tags: [rxvt, urxvt], with_items: [
      urxvt,
      urxvtc,
      urxvtd
    ] }
  - { name: "rxvt-unicode: Create desktop entry", copy: { content: "[Desktop Entry]\nVersion=1.0\nName=urxvt\nComment=An unicode capable rxvt clone\nExec=urxvt\nIcon=utilities-terminal\nTerminal=false\nType=Application\nCategories=System;TerminalEmulator;", dest: "{{ ansible_env.HOME }}/.local/share/applications/urxvt.desktop", force: no }, tags: [rxvt, urxvt] }
  - { name: "rxvt-unicode: Create launch script", copy: { content: "#!/bin/sh\n\nxdotool search --class urxvt windowactivate || urxvt -e /bin/zsh -c 'tmux attach-session -t default 2>/dev/null || tmux new-session -s default -n default'", dest: "/usr/local/bin/urxvt-start", force: no, mode: "+x" }, tags: [rxvt, urxvt] }
  - { name: "rxvt-unicode: Set up as default terminal", become: yes, alternatives: { name: "x-terminal-emulator", path: "/usr/local/bin/urxvt-start" }, tags: [rxvt, urxvt] }

  # 1300. tmux
  - { name: "tmux: Install prerequisites", become: yes, apt: { pkg: [libevent-dev], state: present }, tags: [tmux] }
  - { name: "tmux: Check installation", become: yes, command: "ls /opt/tmux-{{ tmux_version }}", register: tmux_install_query, changed_when: no, failed_when: no, tags: [tmux] }
  - { name: "tmux: Download source", get_url: { url: "https://github.com/tmux/tmux/releases/download/{{ tmux_version }}/tmux-{{ tmux_version }}.tar.gz", dest: "/tmp/tmux-{{ tmux_version }}.tar.gz", checksum: "{{ tmux_checksum }}" }, when: "tmux_install_query.rc > 0", tags: [tmux] }
  - { name: "tmux: Compile & install packages", when: "tmux_install_query.rc > 0", tags: [tmux],
      shell: "cd /tmp && tar --overwrite -zxf 'tmux-{{ tmux_version }}.tar.gz' && cd 'tmux-{{ tmux_version }}' && ./configure --prefix='/opt/tmux-{{ tmux_version }}' && make -j8 && make install" }
  - { name: "tmux: Set up alternatives", become: yes, alternatives: { name: "tmux", link: "/usr/local/bin/tmux", path: "/opt/tmux-{{ tmux_version }}/bin/tmux" }, tags: [tmux] }
  - { name: "tmux: Set up plug-ins directories", file: { path: "{{ item }}", state: directory }, tags: [tmux], with_items: [
      "{{ ansible_env.HOME }}/.tmux",
      "{{ ansible_env.HOME }}/.tmux/plugins",
    ] }
  - { name: "tmux: Clone Tmux Plugin Manager", git: { repo: "https://github.com/tmux-plugins/tpm", dest: "{{ ansible_env.HOME }}/.tmux/plugins/tpm", remote: "github", update: no }, tags: [tmux] }

  # 1400. tig
  - { name: "tig: Install prerequisites", become: yes, apt: { pkg: [libncursesw5-dev], state: present }, tags: [tig] }
  - { name: "tig: Check installation", become: yes, command: "ls /opt/tig-{{ tig_version }}", register: tig_install_query, changed_when: no, failed_when: no, tags: [tig] }
  - { name: "tig: Download source", get_url: { url: "https://github.com/jonas/tig/releases/download/tig-{{ tig_version }}/tig-{{ tig_version }}.tar.gz", dest: "/tmp/tig-{{ tig_version }}.tar.gz", checksum: "{{ tig_checksum }}" }, when: "tig_install_query.rc > 0", tags: [tig] }
  - name: "tig: Compile & install packages"
    when: "tig_install_query.rc > 0"
    shell: |
      cd /tmp &&
      tar --overwrite -zxf 'tig-{{ tig_version }}.tar.gz' &&
      cd 'tig-{{ tig_version }}' &&
      ./configure --prefix='/opt/tig-{{ tig_version }}' &&
      make -j8 && make install
    tags: [tig]
  - { name: "tig: Set up alternatives", become: yes, alternatives: { name: "tig", link: "/usr/local/bin/tig", path: "/opt/tig-{{ tig_version }}/bin/tig" }, tags: [tig] }

  # 1450. envchain
  - { name: "envchain: Install prerequisites", become: yes, apt: { pkg: [libsecret-1-dev, libreadline-dev], state: present } }
  - { name: "envchain: Check installation", become: yes, command: "ls /usr/local/bin/envchain", register: envchain_install_query, changed_when: no, failed_when: no }
  - { name: "envchain: Download source", get_url: { url: "https://github.com/sorah/envchain/archive/v{{ envchain_version }}.tar.gz", dest: "/tmp/envchain-{{ envchain_version }}.tar.gz", checksum: "{{ envchain_checksum }}" }, when: "envchain_install_query.rc > 0" }
  - { name: "envchain: Compile & install packages", when: "envchain_install_query.rc > 0",
      shell: "cd /tmp && tar --overwrite -zxf 'envchain-{{ envchain_version }}.tar.gz' && cd 'envchain-{{ envchain_version }}' && make && make install DESTDIR='/usr/local'" }

  # 1460. jump by @gsamokovarov
  - { name: "jump: Check installation", become: yes, shell: "{{ dpkg_query | format('jump') }}", register: jump_dpkg_query, changed_when: no, failed_when: no, tags: [jump] }
  - { name: "jump: Download packages", get_url: { url: "https://github.com/gsamokovarov/jump/releases/download/v{{ jump_version }}/jump_{{ jump_version }}_{{ jump_platform }}.deb", dest: "/tmp/jump-{{ jump_version }}.deb", checksum: "{{ jump_checksum }}" }, when: "jump_dpkg_query.rc > 0", tags: [jump] }
  - { name: "jump: Install packages", become: yes, apt: { deb: "/tmp/jump-{{ jump_version }}.deb", state: present }, when: "jump_dpkg_query.rc > 0", tags: [jump] }

  # 1500. PHP & extensions
  - { name: "PHP: Add PPA", become: yes, apt_repository: { repo: "ppa:ondrej/php", update_cache: yes }, tags: [php] }
  - name: "PHP: Install packages"
    become: yes
    apt:
      pkg: "{%
        set packages = [\"php-pear\"]
      %}{%
        for version in php_versions
      %}{%
          set _ = packages.extend([ \"php\" + version|string + \"-cli\", \"php\" + version|string + \"-dev\" ])
        %}{%
          for extension in (php_extensions['*']) + (php_extensions[version|string] | default([]))
        %}{%
            set _ = packages.extend([ \"php\" + version|string + \"-\" + extension ])
        %}{%
          endfor
      %}{%
        endfor
      %}{{ packages }}"
      state: present
    tags: [php]
  - { name: "PHP: Composer: Check installation", become: yes, command: "ls /usr/local/bin/composer", register: composer_install_query, changed_when: no, failed_when: no, tags: [php, composer] }
  - { name: "PHP: Composer: Download setup", get_url: { url: "https://getcomposer.org/installer", dest: "/tmp/composer-setup.php", checksum: "sha384:{{ lookup('url', 'https://composer.github.io/installer.sig', split_lines=false) }}" }, when: "composer_install_query.rc > 0", tags: [php, composer] }
  - { name: "PHP: Composer: Install", command: "{{ item }}", when: "composer_install_query.rc > 0", tags: [php, composer], with_items: [
      "php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer",
      "php -r \"unlink('/tmp/composer-setup.php');\"",
    ] }
  - { name: "PHP: Set default version", become: yes, alternatives: { name: "{{ item }}", path: "/usr/bin/{{ item }}{{ php_default_version | default(php_versions[0]) }}" }, tags: [php], with_items: [
      php,
      php-config,
      phpize,
    ] }
  - { name: "PHP: Composer: Capture local Zsh configuration", shell: '{{ localrc_query }}', args: { executable: "/bin/bash" }, register: composer_localrc, changed_when: no, failed_when: no, tags: [php, composer] }
  - name: "PHP: Composer: Update Zsh configuration with aliases"
    blockinfile:
      marker: "### PHP COMPOSER {mark} AUTOMATICALLY GENERATED"
      block: |
        ###
        ### DO NOT EDIT BY HAND, YOUR CHANGES WILL BE LOST!
        ###
        alias composer='/usr/bin/php{{ php_default_version | default(php_versions[0]) }} /usr/local/bin/composer'
        {% for version in php_versions %}
        alias composer{{ version }}='/usr/bin/php{{ version }} /usr/local/bin/composer'
        {% endfor %}
      create: yes
      insertafter: EOF
      path: "{{ ansible_env.HOME }}/{{ composer_localrc.stdout }}"
    tags: [php, composer]

  # 1600. NodeJS
  - { name: "NodeJS: Import GPG key", become: yes, apt_key: { id: "{{ nodesource_gpg_key_id }}", url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key" }, tags: [node, nodejs] }
  - { name: "NodeJS: Add repository", become: yes, apt_repository: { repo: "deb https://deb.nodesource.com/node_{{ nodejs_version }}.x {{ ansible_distribution_release }} main", update_cache: yes }, tags: [node, nodejs] }
  - { name: "NodeJS: Install packages", become: yes, apt: { pkg: [nodejs], state: present }, tags: [node, nodejs] }
  - { name: "NodeJS: Create directories", become: yes, file: { path: "/usr/local/lib/node_modules", state: directory, owner: "{{ ansible_user_id }}" }, tags: [node, nodejs] }
  - { name: "NodeJS: Install global packages in /usr/local", lineinfile: { create: yes, path: "{{ ansible_env.HOME }}/.npmrc", regexp: "^prefix=", line: "prefix=/usr/local" }, tags: [node, nodejs] }

  # 1700. Wine
  - { name: "Wine: Import GPG key", become: yes, apt_key: { id: "{{ wine_gpg_key_id }}", url: "https://dl.winehq.org/wine-builds/winehq.key" } }
  - { name: "Wine: Add repository", become: yes, apt_repository: { repo: "deb https://dl.winehq.org/wine-builds/ubuntu/ {{ ansible_distribution_release }} main", update_cache: yes } }
  # Ubuntu 18.04 does not provide FAudio, which is a dependency of current Wine. (FAudio packages for Ubuntu 19.10 and later are in the distro's universe repository)
  # Following the instructions in https://forum.winehq.org/viewtopic.php?f=8&t=32192 to install FAudio from the OBS…
  - { name: "Wine: Add openSUSE GPG key", become: yes, apt_key: { id: "5104960E", url: "https://download.opensuse.org/repositories/Emulators:/Wine:/Debian/xUbuntu_18.04/Release.key" }, when: "ansible_distribution_version is version('18.04', '==')", tags: [wine] }
  - { name: "Wine: Add openSUSE repository", become: yes, apt_repository: { repo: "deb https://download.opensuse.org/repositories/Emulators:/Wine:/Debian/xUbuntu_18.04/ ./", update_cache: yes }, when: "ansible_distribution_version is version('18.04', '==')", tags: [wine] }
  - { name: "Wine: Install packages", become: yes, apt: { pkg: [winehq-stable], state: present } }
  # 1750. PlayOnLinux
  - { name: "PlayOnLinux: Import GPG key", become: yes, apt_key: { id: "{{ playonlinux_gpg_key_id }}", url: "http://deb.playonlinux.com/public.gpg" } }
  - { name: "PlayOnLinux: Add repository", become: yes, apt_repository: { repo: "deb http://deb.playonlinux.com/ {{ ansible_distribution_release }} main", update_cache: yes } }
  - { name: "PlayOnLinux: Install packages", become: yes, apt: { pkg: [playonlinux], state: present } }
  # 1760. QEMU
  - { name: "QEMU: Install prerequisites", become: yes, apt: { pkg: [bison, flex, libpixman-1-dev, libudev-dev], state: present }, tags: [qemu] }
  - { name: "QEMU: Check installation", become: yes, command: "ls /opt/qemu-{{ qemu_version }}", register: qemu_install_query, changed_when: no, failed_when: no, tags: [qemu] }
  - { name: "QEMU: Download source", get_url: { url: "https://download.qemu.org/qemu-{{ qemu_version }}.tar.xz", dest: "{{ tmp_path }}/qemu-{{ qemu_version }}.tar.xz", checksum: "{{ qemu_checksum }}" }, when: "qemu_install_query.rc > 0", tags: [qemu] }
  - { name: "QEMU: Compile & install packages", when: "qemu_install_query.rc > 0",
      shell: "cd {{ tmp_path }} && tar --overwrite -Jxf 'qemu-{{ qemu_version }}.tar.xz' && cd 'qemu-{{ qemu_version }}' && ./configure --prefix='/opt/qemu-{{ qemu_version }}' && make -j8 && make install", tags: [qemu] }
  - { name: "QEMU: Capture available systems", command: "find /opt/qemu-{{ qemu_version }}/bin -type f -perm -u=x -printf '%f\\n'", register: qemu_installed_systems, changed_when: no, tags: [qemu] }
    # => (for 5.0.0)
    # qemu-system-sh4 qemu-aarch64 qemu-system-riscv64 qemu-system-xtensaeb qemu-system-mips qemu-xtensa qemu-xtensaeb
    # qemu-img qemu-storage-daemon qemu-microblaze qemu-system-ppc64 qemu-ppc64 qemu-system-sparc qemu-sparc32plus
    # qemu-system-cris qemu-system-unicore32 qemu-system-nios2 elf2dmp qemu-system-ppc qemu-system-arm qemu-riscv32
    # qemu-nbd ivshmem-server qemu-nios2 qemu-cris qemu-system-sh4eb qemu-system-tricore qemu-ga qemu-or1k qemu-m68k
    # qemu-system-riscv32 qemu-hppa qemu-riscv64 qemu-system-i386 qemu-mips64el qemu-system-m68k qemu-system-s390x
    # qemu-ppc qemu-x86_64 qemu-system-aarch64 qemu-sparc qemu-s390x qemu-system-hppa qemu-sparc64 qemu-arm
    # qemu-ppc64abi32 qemu-system-microblazeel qemu-sh4 qemu-pr-helper qemu-system-mips64 qemu-system-mips64el
    # qemu-mipsn32 qemu-system-microblaze qemu-system-alpha qemu-ppc64le qemu-mipsel qemu-system-moxie qemu-system-rx
    # qemu-aarch64_be qemu-alpha qemu-io qemu-system-xtensa qemu-tilegx ivshmem-client qemu-mips64 qemu-sh4eb
    # qemu-system-sparc64 qemu-system-mipsel qemu-i386 qemu-mips qemu-microblazeel qemu-system-x86_64 qemu-edid
    # qemu-system-lm32 qemu-system-or1k qemu-armeb qemu-mipsn32el
  - { name: "QEMU: Set up alternatives", become: yes, alternatives: { name: "{{ item }}", link: "/usr/local/bin/{{ item }}", path: "/opt/qemu-{{ qemu_version }}/bin/{{ item }}" }, tags: [qemu], with_items: "{{ qemu_installed_systems.stdout_lines }}" }
  - { name: "QEMU: Set permissions for bridge helper", become: yes, file: { path: "/opt/qemu-{{ qemu_version }}/libexec/qemu-bridge-helper", state: file, owner: "root", group: "{{ ansible_user_gid }}", mode: 'u=srwx,g=rx,o=' }, tags: [qemu] }
  - { name: "QEMU: Set up bridge helper alternative", become: yes, alternatives: { name: "qemu-bridge-helper", link: "/usr/local/bin/qemu-bridge-helper", path: "/opt/qemu-{{ qemu_version }}/libexec/qemu-bridge-helper" }, tags: [qemu] }
  - { name: "QEMU: KVM: Adding group", become: yes, group: { name: kvm, state: present }, tags: [qemu, kvm] }
  - name: "QEMU: KVM: Add udev rules"
    become: yes
    register: qemu_kvm_udev_rules
    copy:
      dest: '/etc/udev/rules.d/65-kvm.rules'
      content: |
        ###
        ### DO NOT EDIT BY HAND, YOUR CHANGES WILL BE LOST!
        ###
        ### See https://unix.stackexchange.com/a/373931

        KERNEL=="kvm", NAME="%k", GROUP="kvm", MODE="0660"
    tags: [qemu, kvm]
  - { name: "QEMU: KVM: Modifying user", become: yes, register: qemu_kvm_user_groups, user: { name: "{{ ansible_user_id }}", append: yes, groups: [kvm] }, tags: [qemu, kvm] }
  - { debug: { msg: "*** NOTE: You MUST log out and in again for changes to take effect (needed by QEMU / KVM). ***" }, when: "(qemu_kvm_user_groups.changed or qemu_kvm_udev_rules.changed)", tags: [qemu, kvm] }

  # 1800. ffmpeg
  - { name: "ffmpeg: Check installation", become: yes, command: "ls /opt/ffmpeg-{{ ffmpeg_version }}", register: ffmpeg_install_query, changed_when: no, failed_when: no, tags: [ffmpeg] }
  - { name: "ffmpeg: Download static build", get_url: { url: "https://johnvansickle.com/ffmpeg/old-releases/ffmpeg-{{ ffmpeg_version }}-{{ ffmpeg_platform }}-static.tar.xz", dest: "/tmp/ffmpeg-{{ ffmpeg_version }}.tar.xz", checksum: "{{ ffmpeg_checksum }}" }, when: "ffmpeg_install_query.rc > 0", tags: [ffmpeg] }
  - { name: "ffmpeg: Unpack & install packages", when: "ffmpeg_install_query.rc > 0",
      shell: "cd /tmp && tar --overwrite -Jxf 'ffmpeg-{{ ffmpeg_version }}.tar.xz' && mv 'ffmpeg-{{ ffmpeg_version }}-{{ ffmpeg_platform }}-static' '/opt/ffmpeg-{{ ffmpeg_version }}'",
      tags: [ffmpeg] }
  - { name: "ffmpeg: Set up alternatives", become: yes, alternatives: { name: "{{ item }}", link: "/usr/local/bin/{{ item }}", path: "/opt/ffmpeg-{{ ffmpeg_version }}/{{ item }}" }, tags: [ffmpeg], with_items: [
      ffmpeg,
      ffprobe
    ] }

  # 1810. Tesseract OCR engine
  - { name: "Tesseract: Add PPA", become: yes, apt_repository: { repo: "ppa:alex-p/tesseract-ocr", update_cache: yes }, tags: [tesseract] }
  - name: "Tesseract: Pin packages priorities"
    become: yes
    copy:
      dest: '/etc/apt/preferences.d/tesseract-ocr'
      force: yes
      content: |
        ###
        ### DO NOT EDIT BY HAND, YOUR CHANGES WILL BE LOST!
        ###
        ### Adjust pin priority of packages and whitelist only certain packages from PPA `alex-p/tesseract-ocr`.

        Package: *
        Pin: release o=LP-PPA-alex-p-tesseract-ocr
        Pin-Priority: 400

        Package: tesseract* liblept5 libopenjp2-7 libtesseract4
        Pin: release o=LP-PPA-alex-p-tesseract-ocr
        Pin-Priority: 500
    register: tesseract_pin_priorities
    tags: [tesseract]
  - { name: "Tesseract: Update apt cache", become: yes, apt: { update_cache: yes }, when: tesseract_pin_priorities.changed, tags: [tesseract] }
  - { name: "Tesseract: Install packages", become: yes, apt: { pkg: "{{ ('tesseract-ocr tesseract-ocr-' + tesseract_languages|join(' tesseract-ocr-')).split(' ') }}", state: present }, tags: [tesseract] }

  # 1900. Authy Desktop
  #
  # See https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=authy
  #
  - { name: "Authy: Install prerequisites", become: yes, apt: { pkg: [p7zip], state: present }, tags: [authy] }
  - { name: "Authy: Check installation", become: yes, command: "ls /opt/authy-{{ authy_desktop_version }}", register: authy_desktop_install_query, changed_when: no, failed_when: no, tags: [authy] }
  - { name: "Authy: Download Windows installer", get_url: { url: "https://s3.amazonaws.com/authy-electron-repository-production/authy/stable/{{ authy_desktop_version }}/win32/x64/Authy%20Desktop%20Setup%20{{ authy_desktop_version }}.exe", dest: "/tmp/AuthyDesktopSetup{{ authy_desktop_version }}.exe", checksum: "{{ authy_desktop_checksum }}" }, when: "authy_desktop_install_query.rc > 0", tags: [authy] }
  - name: "Authy: Extract & install Electron app"
    when: "authy_desktop_install_query.rc > 0"
    shell: |
      cd /tmp &&
      7z x "AuthyDesktopSetup{{ authy_desktop_version }}.exe" -o"authy-{{ authy_desktop_version }}" -y &&
      cd "authy-{{ authy_desktop_version }}" &&
      7z x "authy-{{ authy_desktop_version }}-full.nupkg" -y &&
      mkdir -p app &&
      npx -q asar@2 e lib/net45/resources/app.asar app &&
      cd app &&
      npx -q yarn@1.22 add electron@8 &&
      cp -R "/tmp/authy-{{ authy_desktop_version }}/app" /opt/authy-{{ authy_desktop_version }}
    args: { executable: "/bin/bash" }
    tags: [authy]
  - name: "Authy: Add desktop icon"
    become: yes
    copy:
      dest: "/usr/share/applications/authy.desktop"
      content: |
        [Desktop Entry]
        Version={{ authy_desktop_version }}
        Type=Application
        Terminal=false
        Exec=/opt/authy-{{ authy_desktop_version }}/node_modules/electron/dist/electron /opt/authy-{{ authy_desktop_version }}/
        Name=Authy
        Comment=Two-Factor Authentication
        Icon=/opt/authy-{{ authy_desktop_version }}/img/logos/icon128.png
        StartupWMClass=Authy Desktop
    tags: [authy]

  # 1950. Android Studio
  - { name: "Android Studio: Check installation", become: yes, command: "ls /opt/android-studio-{{ android_studio_version }}-{{ android_studio_build }}", register: android_studio_install_query, changed_when: no, failed_when: no, tags: [android] }
  - { name: "Android Studio: Download Android Studio", get_url: { url: "https://dl.google.com/dl/android/studio/ide-zips/{{ android_studio_version }}/android-studio-ide-{{ android_studio_build }}-linux.tar.gz", dest: "/tmp/android-studio-{{ android_studio_version }}-{{ android_studio_build }}.tar.gz", checksum: "{{ android_studio_checksum }}" }, when: "android_studio_install_query.rc > 0", tags: [android] }
  - { name: "Android Studio: Install Android Studio", shell: "cd /tmp && tar --overwrite -zxf 'android-studio-{{ android_studio_version }}-{{ android_studio_build }}.tar.gz' && mv ./android-studio '/opt/android-studio-{{ android_studio_version }}-{{ android_studio_build }}'", when: "android_studio_install_query.rc > 0", tags: [android] }
  - name: "Android Studio: Add desktop icon"
    copy:
      dest: "{{ ansible_env.HOME }}/.local/share/applications/android-studio.desktop"
      content: |
        [Desktop Entry]
        Version=1.0
        Type=Application
        Name=Android Studio
        Exec=/opt/android-studio-{{ android_studio_version }}-{{ android_studio_build }}/bin/studio.sh %f
        Icon=/opt/android-studio-{{ android_studio_version }}-{{ android_studio_build }}/bin/studio.png
        Comment=The official Android IDE
        Categories=Development;IDE;
        Terminal=false
        StartupNotify=true
        StartupWMClass=jetbrains-studio
        MimeType=application/x-extension-iml;
    tags: [android]
  - { name: "Android Studio: Capture local Zsh configuration", shell: '{{ localrc_query }}', args: { executable: "/bin/bash" }, register: android_studio_localrc, changed_when: no, failed_when: no, tags: [android] }
  - name: "Android Studio: Update Zsh configuration"
    blockinfile:
      marker: "### ANDROID STUDIO {mark} AUTOMATICALLY GENERATED"
      block: |
        ###
        ### DO NOT EDIT BY HAND, YOUR CHANGES WILL BE LOST!
        ###
        export ANDROID_HOME="${ANDROID_HOME-{{ android_home }}}"
        export PATH="${PATH}:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/tools"
      create: yes
      insertafter: EOF
      path: "{{ ansible_env.HOME }}/{{ android_studio_localrc.stdout }}"
    tags: [android]

  # 2000. InfoNotary: qualified electronic signature used when paying bills, accessing tax statements, etc.
  #
  # - 'bit4id-ipki' - driver for Bit4id smart cards.
  # - 'pcsc-omnikey' - driver for OmniKey readers.
  # - 'infonotary-client-software' - software for management of smart cards.
  #
  - { name: "InfoNotary: Import GPG key", become: yes, apt_key: { id: "3D4B1879", url: "https://repository.infonotary.com/install/linux/INotaryCodeSigningD.key.asc" } }
  - { name: "InfoNotary: Add repository", become: yes, apt_repository: { repo: "deb http://repository.infonotary.com/install/linux/DEBS/ any non-free", update_cache: yes } }
  - { name: "InfoNotary: Install packages", become: yes, apt: { pkg: [bit4id-ipki, pcsc-omnikey, infonotary-client-software], state: present } }
  - { name: "InfoNotary: Create Firefox certificate", become: yes, copy: { dest: "/usr/lib/mozilla/certificates/{{ item }}", src: "certificates/{{ item }}", owner: "{{ ansible_user_id }}", mode: 0444, force: yes }, with_items: [
      InfoNotaryQualifiedLegalPersonSealCA.pem,
      InfoNotaryQualifiedPersonalSignCA.pem,
      InfoNotaryQualifiedTimeStampingServiceCA.pem,
      InfoNotaryQualifiedValidatedDomainCA.pem,
      InfoNotaryQualifiedValidationServicesCA.pem,
      InfoNotaryTSPRoot.pem
    ] }
  - { name: "B-Trust: Create Firefox certificate", become: yes, copy: { dest: "/usr/lib/mozilla/certificates/{{ item }}", src: "certificates/{{ item }}", owner: "{{ ansible_user_id }}", mode: 0444, force: yes }, tags: [btrust, certificates], with_items: [
      B-TrustOperationalACA.cer,
      B-TrustOperationalQCA.cer,
      B-TrustOperCA5AES_PEM.cer,
      B-TrustOperCA5QES_PEM.cer,
      B-TrustRootACA.cer,
      B-TrustRootCA5_PEM.cer,
      B-TrustRootQCA.cer
    ] }

  # 2010. ufw
  - { name: "ufw: Install packages", become: yes, apt: { pkg: [ufw], state: present }, tags: [ufw] }
  - { name: "ufw: Configure defaults", become: yes, ufw: { direction: "{{ item.direction }}", policy: "{{ item.policy }}" }, with_items: "{{ ufw_policy }}", notify: "ufw::restart", tags: [ufw] }
  - name: "ufw: Create applications"
    become: yes
    ini_file:
      path: "/etc/ufw/applications.d/{{ item[0] | regex_replace('([A-Z]+)', '-\\1') | regex_replace('^-+|-+$', '') | lower }}"
      no_extra_spaces: true
      section: "{{ item[0] }}"
      option: "{{ item[2] }}"
      value: "{{ item[1][item[2]] | join('|') if item[2] == 'ports' else item[1][item[2]] }}"
      state: present
    with_nested:
      - "{{ ufw_applications.items() }}"
      - [title, description, ports]
    register: ufw_applications_updated
    tags: [ufw, applications.d]
  - { name: "ufw: Update the firewall with updated profile information", become: yes, command: "ufw app update all", notify: "ufw::restart", when: "ufw_applications_updated.changed", tags: [ufw, applications.d] }
  - { name: "ufw: Configure rules", become: yes, ufw: "{{ item }}", with_items: "{{ ufw_rules }}", notify: "ufw::restart", tags: [ufw] }
  - { name: "ufw: Enable logging", become: yes, ufw: { logging: 'on' }, notify: "ufw::restart", tags: [ufw] }
  - { name: "ufw: Allow VPN PPTP connections", become: yes, lineinfile: { path: "/etc/ufw/before.rules", regexp: "-p\\s+47\\b", line: "-A ufw-before-input -p 47 -j ACCEPT", insertbefore: "drop INVALID packets" }, tags: [ufw] }
  - { name: "ufw: Turn on", become: yes, ufw: { state: enabled }, tags: [ufw] }

  # 2020. SSH+mosh
  - { name: "SSH: Install packages", become: yes, apt: { pkg: [openssh-server], state: present }, tags: [ssh] }
  - { name: "SSH: Configure daemon", become: yes, lineinfile: { dest: /etc/ssh/sshd_config, regexp: "^[#\\s]*{{ item.key }}(?!\\.)\\b", line: "{{ item.key }}	{{ item.value }}", insertafter: EOF, state: present }, with_dict: "{{ sshd_config }}", notify: "sshd::restart", tags: [ssh] }
  - { name: "SSH: Prune host keys", become: yes, lineinfile: { dest: /etc/ssh/sshd_config, regexp: "^[#\\s]*HostKey\\s+(?!(\\/etc\\/ssh\\/ssh_host_{{ sshd_host_keys | join('_key|\\/etc\\/ssh\\/ssh_host_') }}_key))", state: absent }, notify: "sshd::restart", tags: [ssh] }
  - { name: "SSH: Configure host keys", become: yes, lineinfile: { dest: /etc/ssh/sshd_config, regexp: "^[#\\s]*HostKey\\s+/etc/ssh/ssh_host_{{ item }}_key", line: "HostKey	/etc/ssh/ssh_host_{{ item }}_key", state: present, insertafter: "^(Port|HostKey)\\b" }, with_items: "{{ sshd_host_keys }}", notify: "sshd::restart", tags: [ssh] }
  - { name: "PAM: Google Authenticator: Install prerequisites", become: yes, apt: { pkg: [checkinstall, libqrencode3, libpam0g-dev], state: present }, tags: [ssh, pam] }
  - { name: "PAM: Google Authenticator: Check installation", become: yes, shell: "{{ dpkg_query | format('libpam-google-authenticator') }}", register: pam_google_authenticator_dpkg_query, changed_when: no, failed_when: no, tags: [ssh, pam] }
  - { name: "PAM: Google Authenticator: Download", get_url: { url: "https://github.com/google/google-authenticator-libpam/archive/{{ pam_google_authenticator_version }}.tar.gz", dest: "/tmp/google-authenticator-libpam-{{ pam_google_authenticator_version }}.tar.gz", checksum: "{{ pam_google_authenticator_checksum }}" }, when: "pam_google_authenticator_dpkg_query.rc > 0", tags: [ssh, pam] }
  - name: "PAM: Google Authenticator: Compile & install package"
    become: yes
    when: "pam_google_authenticator_dpkg_query.rc > 0"
    shell: |
      cd /tmp &&
      tar --overwrite -zxf 'google-authenticator-libpam-{{ pam_google_authenticator_version }}.tar.gz' &&
      cd 'google-authenticator-libpam-{{ pam_google_authenticator_version }}' &&
      autoreconf -i &&
      ./configure --prefix='/usr/local' &&
      make && checkinstall -y --install=no \
        --maintainer 'stanimir@angeloff.name' \
        --pkgname 'libpam-google-authenticator' \
        --pkgversion '{{ pam_google_authenticator_deb_version }}' \
        --pkgrelease "{{ pam_google_authenticator_version | replace('.', '') }}" \
        --pkglicense 'Apache License, Version 2.0' \
        --requires libqrencode3,libpam0g &&
      dpkg -i 'libpam-google-authenticator_{{ pam_google_authenticator_deb_version }}-'*.deb
    args: { executable: "/bin/bash" }
    tags: [ssh, pam]
  - { name: "PAM: Google Authenticator: Check system installation", become: yes, command: "apt-mark showhold", register: pam_google_authenticator_system_install_query, changed_when: no, failed_when: no, tags: [pam] }
  - { name: "PAM: Google Authenticator: Hold system packages", become: yes, when: "'libpam-google-authenticator' not in pam_google_authenticator_system_install_query.stdout", command: "apt-mark hold libpam-google-authenticator", tags: [pam] }
  - name: "PAM: Notify: Add script"
    tags: [ssh, pam]
    copy:
      dest: '/usr/local/bin/pam-notify-ssh-open-session'
      owner: "{{ ansible_user_id }}"
      mode: 'u=rwx,g=rx,o=rx'
      force: yes
      content: |
        #!/bin/sh
        set -x
        [ "$PAM_TYPE" = "open_session" ] || exit 0
        if [ -z "$DBUS_SESSION_BUS_ADDRESS" ]; then
          pgrep 'gnome-session' -u "$PAM_USER" | while read -r pid; do
            dbus_env="$( cat /proc/"$pid"/environ | grep -z '^DBUS_SESSION_BUS_ADDRESS=' )"
            if [ -n "$dbus_env" ]; then
              su -s /bin/sh -c "export $dbus_env ; exec notify-send -u critical -t 30000 -i system-log-out \"A new '$PAM_SERVICE' session was opened by\" \"$PAM_USER (on `date` from $PAM_RHOST)\"" "$PAM_USER"
            fi
          done
        else
          notify-send -u critical -t 30000 -i system-log-out "A new '$PAM_SERVICE' session was opened by" "$PAM_USER (on `date` from $PAM_RHOST)"
        fi
  - { name: "SSH: Configure PAM", become: yes, lineinfile: { dest: /etc/pam.d/sshd, regexp: "^[#\\s]*{{ item.service }}\\s+{{ item.control }}\\s+.*{{ item.path | basename }}\\b", line: "{{ item.service }}	{{ item.control }}	{{ item.path }}{% if 'arguments' in item %}	{{ item.arguments }}{% endif %}", insertafter: EOF, state: present }, notify: "sshd::restart", tags: [ssh], with_items: [
      # See http://manpages.ubuntu.com/manpages/cosmic/en/man5/pam.d.5.html
      { service: auth, control: required, path: /usr/local/lib/security/pam_google_authenticator.so, arguments: 'echo_verification_code grace_period=3600' },
      { service: session, control: optional, path: pam_exec.so, arguments: '/usr/local/bin/pam-notify-ssh-open-session' }
    ] }
  - { name: "SSH: Override ufw rules", become: yes, lineinfile: { dest: /etc/ufw/applications.d/openssh-server, regexp: "^[#\\s]*ports\\s*=", line: "ports={{ sshd_config.Port | default(22) }}/tcp", state: present }, notify: "ufw::restart", tags: [ssh] }
  - { name: "SSH: Configure ufw rules", become: yes, ufw: { rule: allow, name: OpenSSH, comment: 'Allow ports used by the OpenSSH server.' }, notify: "ufw::restart", tags: [ssh] }
  - { name: "Mosh: Install prerequisites", become: yes, apt: { pkg: [perl, protobuf-compiler, libprotobuf-dev, libncurses5-dev, zlib1g-dev, libutempter-dev, libssl-dev], state: present }, tags: [mosh] }
  - { name: "Mosh: Check installation", become: yes, command: "ls /opt/mosh-{{ mosh_version }}", register: mosh_install_query, changed_when: no, failed_when: no, tags: [mosh] }
  - { name: "Mosh: Download source", get_url: { url: "https://mosh.org/mosh-{{ mosh_version }}.tar.gz", dest: "/tmp/mosh-{{ mosh_version }}.tar.gz", checksum: "{{ mosh_checksum }}" }, when: "mosh_install_query.rc > 0", tags: [mosh] }
  - name: "Mosh: Compile & install packages"
    when: "mosh_install_query.rc > 0"
    shell: |
      cd /tmp &&
      tar --overwrite -zxf 'mosh-{{ mosh_version }}.tar.gz' &&
      cd 'mosh-{{ mosh_version }}' &&
      ./configure --prefix='/opt/mosh-{{ mosh_version }}' --enable-hardening --enable-client --enable-server --enable-ufw --with-utempter --with-ncurses &&
      make && make install
    args: { executable: "/bin/bash" }
    tags: [mosh]
  - { name: "Mosh: Set up alternatives", become: yes, alternatives: { name: "{{ item }}", link: "/usr/local/bin/{{ item }}", path: "/opt/mosh-{{ mosh_version }}/bin/{{ item }}" }, tags: [mosh], with_items: [
      mosh,
      mosh-client,
      mosh-server
    ] }
  - { name: "Mosh: Copy ufw application profile", become: yes, copy: { src: "/opt/mosh-{{ mosh_version }}/etc/ufw/applications.d/mosh", dest: "/etc/ufw/applications.d/mosh", force: yes }, tags: [mosh] }
  - { name: "Mosh: Configure ufw rules", become: yes, ufw: { rule: allow, name: mosh, comment: 'Allow ports used by mosh-server.' }, notify: "ufw::restart", tags: [mosh] }

  # 3000. Communications
  - { name: "Ferdi: Check installation", become: yes, shell: "{{ dpkg_query | format('ferdi') }}", register: ferdi_dpkg_query, changed_when: no, failed_when: no, tags: [ferdi] }
  - { name: "Ferdi: Download packages", get_url: { url: "https://github.com/getferdi/ferdi/releases/download/v{{ ferdi_version }}/ferdi_{{ ferdi_version }}_{{ ferdi_platform }}.deb", dest: "/tmp/ferdi-{{ ferdi_version }}.deb", checksum: "{{ ferdi_checksum }}" }, when: "ferdi_dpkg_query.rc > 0", tags: [ferdi] }
  - { name: "Ferdi: Install packages", become: yes, apt: { deb: "/tmp/ferdi-{{ ferdi_version }}.deb", state: present }, when: "ferdi_dpkg_query.rc > 0", tags: [ferdi] }
  - { name: "Ferdi: Change priority at launch", become: yes, replace: { path: "/usr/share/applications/ferdi.desktop", regexp: "^Exec=(nice\\s+[a-z0-9-]+\\s+)?(/opt/Ferdi/ferdi)", replace: 'Exec=nice -n5 \2' }, tags: [ferdi] }

  # 3100. Steam
  - { name: "Steam: Check installation", become: yes, shell: "{{ dpkg_query | format('steam-launcher') }}", register: steam_dpkg_query, changed_when: no, failed_when: no, tags: [steam] }
  - { name: "Steam: Download packages", get_url: { url: "http://repo.steampowered.com/steam/archive/precise/steam-launcher_{{ steam_launcher_version }}_all.deb", dest: "/tmp/steam-launcher-{{ steam_launcher_version }}.deb", checksum: "{{ steam_launcher_checksum }}" }, when: "steam_dpkg_query.rc > 0", tags: [steam] }
  - { name: "Steam: Install packages", become: yes, apt: { deb: "/tmp/steam-launcher-{{ steam_launcher_version }}.deb", state: present }, when: "steam_dpkg_query.rc > 0", tags: [steam] }

  # 3200. Fraidycat
  - { name: "Fraidycat: Install AppImage", get_url: { url: "https://github.com/kickscondor/fraidycat/releases/download/v{{ fraidycat_version }}/Fraidycat-{{ fraidycat_version }}.AppImage", dest: "/usr/local/bin/Fraidycat", mode: "+x", checksum: "{{ fraidycat_checksum }}" }, tags: [fraidycat] }
  - { name: "Fraidycat: Download desktop icon", get_url: { url: "https://github.com/kickscondor/fraidycat/raw/v{{ fraidycat_version }}/src/images/flatcat-512.png", dest: "{{ ansible_env.HOME }}/.local/share/icons/appimagekit-fraidycat.png" }, tags: [fraidycat] }
  - name: "Fraidycat: Add desktop icon"
    copy:
      dest: "{{ ansible_env.HOME }}/.local/share/applications/appimagekit-fraidycat.desktop"
      content: |
        [Desktop Entry]
        Name=Fraidycat
        Exec="/usr/local/bin/Fraidycat" %U
        Terminal=false
        Type=Application
        Icon=appimagekit-fraidycat
        StartupWMClass=Fraidycat
        X-AppImage-Version={{ fraidycat_version }}
        Comment=Follow blogs, wikis, YouTube, Twitter, Reddit, Instagram and the like... from a distance.
        Categories=News;
    tags: [fraidycat]

  # 3500. Nice things…
  - { name: "Bing Wallpaper: Create script directory", file: { path: "{{ ansible_env.HOME }}/bin", state: directory }, tags: [bing, wallpaper, desktop] }
  - { name: "Bing Wallpaper: Download script", get_url: { url: "https://github.com/whizzzkid/bing-wallpapers-for-linux/raw/{{ bingwallpaper_version }}/bingwallpaper", dest: "{{ ansible_env.HOME }}/bin/bingwallpaper", mode: "+x", checksum: "{{ bingwallpaper_checksum }}" }, tags: [bing, wallpaper, desktop] }
  - { name: "Bing Wallpaper: Set UHD size/resolution", lineinfile: { dest: "{{ ansible_env.HOME }}/bin/bingwallpaper", regexp: "^[#\\s]*size=", line: "size=UHD", state: present }, tags: [bing, wallpaper, desktop] }
  - { name: "Bing Wallpaper: Set up CRON", become: yes, cron: { name: 'Bing Wallpaper', job: 'DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/{{ ansible_user_uid }}/bus" /home/stan/bin/bingwallpaper -1 {{ ansible_env.HOME }}/bin/bingwallpaper -1 1>/tmp/bingwallpaper.log 2>&1', special_time: hourly, state: present, user: "{{ ansible_user_id }}" }, tags: [bing, wallpaper, desktop] }

  # 5000. Post-install clean up & purging of packages
  #
  - { name: "Post-install: Clean packages", become: yes, apt: { pkg: "{{ lookup('file', 'apt.absent.txt').splitlines() | map('regex_replace', '#.*$', '') | map('trim') | select('regex', '.') | list }}", state: absent, autoremove: yes }, tags: [post-install] }
  - { name: "Post-install: Purge packages", become: yes, apt: { pkg: "{{ lookup('file', 'apt.purge.txt').splitlines() | map('regex_replace', '#.*$', '') | map('trim') | select('regex', '.') | list }}", state: absent, autoremove: yes, purge: true }, tags: [post-install] }
  - name: "Post-install: Never install snapd again"
    become: yes
    copy:
      dest: '/etc/apt/preferences.d/no-snapd'
      force: yes
      content: |
        ###
        ### DO NOT EDIT BY HAND, YOUR CHANGES WILL BE LOST!
        ###
        ### See https://github.com/cies/kubuntu-setup/tree/875ae9f39d2#remove-snap
        ### See https://askubuntu.com/questions/75895/how-to-forbid-a-specific-package-to-be-installed#comment1436692_76075

        Package: snapd
        Pin: release *
        Pin-Priority: -1
    tags: [snapd]

  # 5010. Scheduled jobs to tame caches
  - name: "Post-install: Clean up caches daily"
    become: yes
    tags: [cache]
    copy:
      dest: "/etc/cron.daily/99tame-caches"
      owner: "{{ ansible_user_id }}"
      group: root
      mode: 0774
      force: yes
      content: |
        #!/bin/sh
        set -e
        {% set indent = "\t" %}
        {% set su = "su " + (ansible_user_id | quote) + " -c" %}
        if which composer 1>/dev/null 2>&1; then
        {{ indent }}{{ su }} "composer clear-cache -n --quiet" 1>/dev/null
        fi
        if which npm 1>/dev/null 2>&1; then
        {{ indent }}{{ su }} "npm cache clean --force --loglevel error" 1>/dev/null
        fi
        if which yarn 1>/dev/null 2>&1; then
        {{ indent }}{{ su }} "yarn cache clean" 1>/dev/null
        fi
        {% for directory in [".cache/bower", ".cache/pip", ".npm/_npx"] %}
        if [ -d "{{ ansible_env.HOME }}/{{ directory }}" ]; then rm -Rf "{{ ansible_env.HOME }}/{{ directory }}" 1>/dev/null ; fi
        {% endfor %}

  - { import_tasks: flatpak.tasks.yml }


# vim: sw=2 ts=2 et :
