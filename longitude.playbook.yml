#
# $ make playbook
#
# This playbook has been tested with Ubuntu 16.04 and Ansible 2.7.
#
- hosts: [127.0.0.1]
  connection: local

    #
    # Things you may want to do first
    # -------------------------------
    #
    # 1. Install Ubuntu Additional Drivers manually and reboot.
    # 2. Install "ubuntu-gnome-desktop" (with gdm3) and reboot, switch the default session before logging in.
    # 3. Remove unity*
    # 4. You should REALLY run apt update && apt upgrade (and perhaps apt dist-upgrade) and reboot.
    # 5. Mess about with ~/.fonts, Gnome Shell extensions, Gnome Tweak Tool, settings, personalisations, etc.
    #    5.1. For rxvt-unicode to start, you'll need at least the following fonts: Input, Noto Mono, Symbola.
    #
    # NOTE: Install ubuntu-restricted-extras if you want to watch Netflix/YouTube/H.264 videos.
    #
    # Customisations
    # --------------
    #
    # - parcellite: to hide the annoying bottom-left corner icon, change the startup script to include '--no-icon'
    # - Keybase: complete the installation by running `run_keybase` and import your keys:
    #
    #     $ keybase pgp export | gpg --import
    #     $ keybase pgp export -s | gpg --allow-secret-key-import --import
    #

  vars:

    # The preferred GTK theme. This will not be enforced, but will be provided to apps as an override.
    gtk_theme_override: "Adwaita"

    firefox_unofficial_extensions:
      bypass-paywalls: { url: "https://github.com/iamadamdev/bypass-paywalls-firefox/releases/download/v%(version)s/bypass_paywalls-%(version)s-an+fx.xpi", version: 1.5.1, checksum: "md5:8937de9f94d350abf532d585e2f22df5" } # See https://github.com/iamadamdev/bypass-paywalls-firefox/releases

    # See https://github.com/mozilla/policy-templates/blob/master/README.md
    #
    firefox_policies:
      policies:
        DisableTelemetry: true
        DisablePocket: true
        DNSOverHTTPS:
          Enabled: true
          ProviderURL: "https://mozilla.cloudflare-dns.com/dns-query"
          Locked: true
        Certificates:
          ImportEnterpriseRoots: true
          Install:
            - InfoNotaryQualifiedLegalPersonSealCA.pem
            - InfoNotaryQualifiedPersonalSignCA.pem
            - InfoNotaryQualifiedTimeStampingServiceCA.pem
            - InfoNotaryQualifiedValidatedDomainCA.pem
            - InfoNotaryQualifiedValidationServicesCA.pem
            - InfoNotaryTSPRoot.pem
        SecurityDevices:
          Bit4Id: "/usr/lib/libbit4ipki.so"
        Extensions:
          Install: "{%
            set extensions = []
          %}{%
            for name, extension in firefox_unofficial_extensions | dictsort
          %}{%
              set _ = extensions.extend([ \"/usr/local/lib/firefox/extensions/\" + name + \"-\" + extension.version + \"-unofficial.xpi\" ])
          %}{%
            endfor
          %}{{ extensions }}"

    # See https://support.mozilla.org/en-US/kb/customizing-firefox-using-autoconfig
    #
    firefox_about_config:
      "devtools.chrome.enabled": true # This enables Ctrl+Alt+Shift+J as well as the command entry in Ctrl+Shift+J.
      # See https://web.archive.org/web/20190410203751/https://www.internetsociety.org/blog/2018/12/dns-privacy-support-in-mozilla-firefox/
      "network.trr.mode": 3
      "network.trr.bootstrapAddress": "1.1.1.1"
      "network.security.esni.enabled": true

    firefox_locales: [en, bg]

    neovim_dictionaries: [bg.utf-8]

    git_lfs_gpg_key_id: "DC282033"

    docker_gpg_key_id: "0EBFCD88"
    docker_compose_version: 1.22.0
    docker_compose_checksum: "sha256:f679a24b93f291c3bffaff340467494f388c0c251649d640e661d509db9d57e9"
    docker_machine_version: 0.16.1
    docker_machine_checksum: "sha256:44a008c14549156222b314b1448c22ef255b446419fcf96570f3f288dff318a9"
    docker_machine_drivers:
      linode: { url: "https://github.com/linode/docker-machine-driver-%(name)s/releases/download/v%(version)s/docker-machine-driver-%(name)s_linux-amd64.zip", version: 0.1.8, checksum: "sha256:b31b6a504c59ee758d2dda83029fe4a85b3f5601e22dfa58700a5e6c8f450dc7" }

    gnupg_conf:
      use-agent: ''
      charset: 'UTF-8'
      default-key: '595EA753'
    gnupg_agent_conf:
      enable-ssh-support: ''
      pinentry-program: '/usr/bin/pinentry-gnome3'
      default-cache-ttl: 3600
      max-cache-ttl: 7200

    keepassxc_version: 2.4.0
    keepassxc_platform: x86_64
    keepassxc_checksum: "sha256:559be14b9f24feb6bded010aef55dd7cb72b3cb081485c49a548bd614dba4324"

    authy_desktop_version: 1.7.0
    authy_desktop_checksum: "md5:bd2182d0ae4c957efe5f2d244d4dfdb5"

    dropbox_version: 2019.01.31

    imagemagick_version: 7.0.8-34
    imagemagick_checksum: "sha256:0456bb9617144619f56103414e13ae0bbfa63af68a60e5967a41fe69e7fb57bf"

    youtube_dl_version: 2019.04.30
    youtube_dl_checksum: "sha256:3c7f9192f93405bca7f68fd944a08f3bad5274ac90007cf423edb2fb779d382b"

    ripgrep_version: 0.10.0
    ripgrep_platform: amd64

    pup_version: 0.4.0
    pup_platform: linux_amd64
    pup_checksum: "sha256:ec3d29e9fb375b87ac492c8b546ad6be84b0c0b49dab7ff4c6b582eac71ba01c"

    jq_version: 1.6
    jq_platform: linux64
    jq_checksum: "sha256:af986793a515d500ab2d35f8d2aecd656e764504b789b66d7e1a0b727a124c44"

    httpie_version: 1.0.2

    awscli_version: '>1.16'

    fzf_version: 0.17.5
    fzf_platform: linux_amd64
    fzf_checksum: "sha256:3020c7d4d43d524ff394df306337b6de873b9db0bd9cd9dc73cd80cbd6e0c2f8"

    bat_version: 0.10.0
    bat_platform: amd64
    bat_checksum: "md5:7b21d6d7d42493440d0c51d3b64947c8"

    xidel_version: 0.9.8-1
    xidel_platform: amd64
    xidel_checksum: "sha256:f6a6e29b77547d5ae38383440bd653b3eaf9eeb470def14cc48154a4f6925f69"

    # See https://dl.equinox.io/ngrok/ngrok/stable/archive
    ngrok_version: 2.3.18
    ngrok_platform: linux-amd64
    ngrok_stable_channel_id: 8jFoSpgnjgu
    ngrok_checksum: "sha256:3e4f39dd3130b80dd0a736182712952100fcc462a0eb4d9ca15e50668c9d3862"

    ffsend_version: 0.2.37
    ffsend_platform: linux-x64
    ffsend_checksum: "sha256:9c6ba0596c0f65d5f70fb96f5a51426ae03f3baa44be803e34fd26755f327d69"

    zsh_version: 5.7.1
    zsh_checksum: "md5:374f9fdd121b5b90e07abfcad7df0627"

    rxvt_unicode_version: 9.22
    rxvt_unicode_cvs_date: "2019-04-01"
    rxvt_unicode_patches: [
      { url: "https://gist.githubusercontent.com/StanAngeloff/743c1cbb7566b5f0d84aeb41503bb989/raw/60b3755868282052c9842c0bf8c71e5dcf51280a/rxvt-unicode-clipboard.patch", checksum: "sha256:fef02e5498d65703910d1205780681a8b828df09e418e676d26192664c91a4d4" }
    ]
    rxvt_unicode_configure_args: [
      --enable-256-color,
      --enable-combining,
      --enable-fading,
      --enable-font-styles,
      --enable-iso14755,
      --enable-keepscrolling,
      --enable-lastlog,
      --enable-mousewheel,
      --enable-next-scroll,
      --enable-perl,
      --enable-pointer-blank,
      --enable-rxvt-scroll,
      --enable-selectionscrolling,
      --enable-slipwheeling,
      --disable-smart-resize,
      --enable-startup-notification,
      --enable-transparency,
      --enable-unicode3,
      --enable-utmp,
      --enable-wtmp,
      --enable-xft,
      --enable-xim,
      --enable-xterm-scroll,
      --disable-pixbuf,
      --disable-frills
    ]

    tmux_version: 2.8
    tmux_checksum: "sha256:7f6bf335634fafecff878d78de389562ea7f73a7367f268b66d37ea13617a2ba"

    tig_version: 2.4.1
    tig_checksum: "sha256:b6b6aa183e571224d0e1fab3ec482542c1a97fa7a85b26352dc31dbafe8558b8"

    envchain_version: 1.0.1
    envchain_checksum: "sha256:09af1fe1cfba3719418f90d59c29c081e1f22b38249f0110305b657bd306e9ae"

    php_version: 7.2
    php_extensions: [bcmath, curl, gd, gmp, intl, json, mbstring, mysql, pgsql, sqlite3, xml, zip]

    composer_setup_checksum: "48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5"

    nodesource_gpg_key_id: "68576280"
    nodejs_version: 8

    wine_gpg_key_id: "F987672F"
    playonlinux_gpg_key_id: "8E3D6C3A"

    qemu_version: 4.0.0
    qemu_checksum: "sha256:13a93dfe75b86734326f8d5b475fde82ec692d5b5a338b4262aeeb6b0fa4e469"

    ffmpeg_version: 4.1.3
    ffmpeg_platform: amd64
    ffmpeg_checksum: "md5:9bdb279ec557e281a6800718add63385"

    franz_version: 5.1.0
    franz_platform: x86_64
    franz_checksum: "sha256:f04f6b39ebfa5d01a8a4ef349dc72a6f602965ef757c2307ad7cb581cdd54edf"

    ufw_policy:
      - { direction: incoming, policy: deny }
      - { direction: outgoing, policy: allow }

    ufw_rules:
      - { rule: allow, comment: 'Allow Docker containers to communicate with host services/1.', direction: in, from_ip: '172.16.0.0/12', proto: tcp, to_port: 3030 }

  handlers:
    - { name: "ufw::restart", become: yes, service: { name: ufw, state: restarted } }

  tasks:

  - { name: "Prerequisites: Paths writeable by the user", become: yes, file: { path: "{{ item }}", owner: "{{ ansible_user_id }}" }, with_items: ["/usr/local/bin", "/opt"] }

  # 9. sudo password is required each time
  - { name: "System: sudo timeout", become: yes, copy: { content: "# Prompt for a password on every escalation.\nDefaults timestamp_timeout=0\n", dest: "/etc/sudoers.d/timeout", force: no, validate: "visudo -cf %s" } }

  # 10. tmpfs at /tmp
  - { name: "System: Make /tmp a tmpfs", become: yes, lineinfile: { path: "/etc/fstab", regexp: "\\/tmp\\s", line: "tmpfs /tmp tmpfs rw,nosuid,nodev,size=4G 0 0" } }

  # 15. i386 is a needed for Wine.
  - { name: "System: Add dpkg architectures", become: yes, lineinfile: { dest: "/var/lib/dpkg/arch", line: "{{ item }}", create: yes }, with_items: [amd64, i386] }
  - { name: "System: Update apt cache", become: yes, apt: { update_cache: yes, cache_valid_time: "{{ 24 * 60 * 60 }}" } }

  # 20. build-essential & a few more packages are essential
  - { name: "System: Install essentials", become: yes, apt: { pkg: [build-essential, unzip], state: present } }

  # 100. Git
  - { name: "Git: Add PPA", become: yes, apt_repository: { repo: "ppa:git-core/ppa", update_cache: yes } }
  - { name: "Git: Install packages", become: yes, apt: { pkg: [git, git-gui, gitk], state: latest } }
  # 110. Git LFS
  - { name: "Git: Install Git LFS prerequisites", become: yes, apt: { pkg: [gnupg, curl, debian-archive-keyring, apt-transport-https], state: present } }
  - { name: "Git: Import Git LFS GPG key", become: yes, apt_key: { id: "{{ git_lfs_gpg_key_id }}", url: "https://packagecloud.io/github/git-lfs/gpgkey" } }
  - { name: "Git: Add Git LFS repository", become: yes, apt_repository: { repo: "deb https://packagecloud.io/github/git-lfs/ubuntu/ {{ ansible_distribution_release }} main", update_cache: yes } }
  - { name: "Git: Install Git LFS packages", become: yes, apt: { pkg: [git-lfs], state: latest } }
  - { name: "Git: Install git-extras packages", become: yes, apt: { pkg: [git-extras], state: latest } }
  # 120. git-crypt
  - { name: "Git: Install git-crypt packages", become: yes, apt: { pkg: [git-crypt], state: latest } }

  # 200. Python
  - { name: "Python: Install pip packages & Python development headers", become: yes, apt: { pkg: [python-dev, python-pip, python3-dev, python3-pip], state: present } }

  # 250. Git
  - { name: "Git: Add supporting tools", become: yes, pip: { executable: pip2, name: diff-highlight, state: present } }

  # 300. etkkeeper
  - { name: "etckeeper: Install packages", become: yes, apt: { pkg: [etckeeper], state: present } }
  - { name: "etckeeper: Turn off Git signing", become: yes, lineinfile: { path: "/etc/etckeeper/etckeeper.conf", regexp: "^GIT_COMMIT_OPTIONS=", line: "GIT_COMMIT_OPTIONS=\"--no-gpg-sign\"" } }

  # 400. Neovim
  - { name: "Neovim: Add stable PPA", become: yes, apt_repository: { repo: "ppa:neovim-ppa/stable", update_cache: yes } }
  - { name: "Neovim: Install packages", become: yes, apt: { pkg: [neovim], state: latest } }
  # 410. Neovim Python support
  - { name: "Neovim: Add Python support", become: yes, pip: { executable: "{{ item }}", name: pynvim, state: latest }, with_items: [pip2, pip3] }
  # 420. Neovim alternatives
  - { name: "Neovim: Set up alternatives", become: yes, alternatives: { name: "{{ item }}", path: "/usr/bin/nvim" }, with_items: [vi, vim, editor] }

  # 500. Docker
  - { name: "Docker: Install prerequisites", become: yes, apt: { pkg: [apt-transport-https, ca-certificates, curl, gnupg-agent, software-properties-common], state: present }, tags: [docker] }
  - { name: "Docker: Import GPG key", become: yes, apt_key: { id: "{{ docker_gpg_key_id }}", url: "https://download.docker.com/linux/ubuntu/gpg" }, tags: [docker] }
  - { name: "Docker: Add repository", become: yes, apt_repository: { repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable", update_cache: yes }, tags: [docker] }
  - { name: "Docker: Install packages", become: yes, apt: { pkg: [docker-ce], state: latest }, tags: [docker] }
  # 510. Docker Post-installation steps for Linux
  - { name: "Docker: Adding group", become: yes, group: { name: docker, state: present }, tags: [docker] }
  - { name: "Docker: Modifying user", become: yes, register: docker_user_groups, user: { name: "{{ ansible_user_id }}", append: yes, groups: [docker] }, tags: [docker] }
  - { debug: { msg: "Docker NOTE: You MUST log out and in again for changes to take effect." }, when: docker_user_groups.changed }
  # 520. Docker Compose
  - { name: "Docker: Install Docker Compose", get_url: { url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-{{ ansible_system }}-{{ ansible_machine }}", dest: "/usr/local/bin/docker-compose-{{ docker_compose_version }}", mode: "+x", checksum: "{{ docker_compose_checksum }}" }, tags: [docker] }
  # 525. Docker Machine
  - { name: "Docker: Install Docker Machine", get_url: { url: "https://github.com/docker/machine/releases/download/v{{ docker_machine_version }}/docker-machine-{{ ansible_system }}-{{ ansible_machine }}", dest: "/usr/local/bin/docker-machine-{{ docker_machine_version }}", mode: "+x", checksum: "{{ docker_machine_checksum }}" }, tags: [docker] }
  - name: "Docker: Install drivers for Docker Machine"
    get_url:
      url: "{{ item.value.url | format(name=item.key, version=item.value.version) }}"
      dest: "{% if '.zip' == item.value.url[-4:] %}/tmp/docker-machine-driver-{{ item.key }}-{{ item.value.version }}.zip{% else %}/usr/local/bin/docker-machine-driver-{{ item.key }}-{{ item.value.version }}{% endif %}"
      mode: "{% if '.zip' == item.value.url[-4:] %}{{ omit }}{%                                                             else %}+x{%                                                                           endif %}"
      checksum: "{{ item.value.checksum }}"
    with_dict: "{{ docker_machine_drivers }}"
    when: "not ( '/usr/local/bin/docker-machine-driver-' + item.key + '-' + item.value.version ) is is_file"
    tags: [docker]
  - { name: "Docker: Unpack drivers for Docker Machine", shell: "cd /tmp && unzip -o 'docker-machine-driver-{{ item.key }}-{{ item.value.version }}.zip' && mv './docker-machine-driver-{{ item.key }}' '/usr/local/bin/docker-machine-driver-{{ item.key }}-{{ item.value.version }}'", with_dict: "{{ docker_machine_drivers }}", when: "not ( '/usr/local/bin/docker-machine-driver-' + item.key + '-' + item.value.version ) is is_file and '.zip' == item.value.url[-4:]", tags: [docker] }
  # 530. Docker alternatives
  - { name: "Docker: Set up alternatives", become: yes, alternatives: { name: "{{ item.name }}", link: "/usr/local/bin/{{ item.name }}", path: "/usr/local/bin/{{ item.name }}-{{ item.version }}" }, tags: [docker], with_items: "{%
        set alternatives = [
          { 'name': 'docker-compose', 'version': docker_compose_version },
          { 'name': 'docker-machine', 'version': docker_machine_version }
        ]
      %}{%
        for key, driver in docker_machine_drivers | dictsort
      %}{%
          set _ = alternatives.extend([ { 'name': 'docker-machine-driver-' + key, 'version': driver.version } ])
      %}{%
        endfor
      %}{{ alternatives }}" }

  # 550. GnuPG
  - { name: "GnuPG: Install packages", become: yes, apt: { pkg: [gnupg, gnupg-agent, pinentry-curses, pinentry-gnome3], state: latest } }
  - { name: "GnuPG: Create directories", file: "{{ item }}", with_items: [
      { path: "{{ ansible_env.HOME }}/.gnupg", state: directory }
    ] }
  - name: "GnuPG: Configure GPG"
    lineinfile:
      create: yes
      path: "{{ ansible_env.HOME }}/.gnupg/gpg.conf"
      regexp: "^[#\\s]*{{ item.key }}\\b"
      line: "{{ ( item.key | string + ' ' + item.value | default('') | string ) | trim }}"
      insertafter: 'EOF'
    with_dict: "{{ gnupg_conf }}"
  - name: "GnuPG: Configure GPG agent"
    lineinfile:
      create: yes
      path: "{{ ansible_env.HOME }}/.gnupg/gpg-agent.conf"
      regexp: "^[#\\s]*{{ item.key }}\\b"
      line: "{{ ( item.key | string + ' ' + item.value | default('') | string ) | trim }}"
      insertafter: 'EOF'
    with_dict: "{{ gnupg_agent_conf }}"

  # 600. Firefox
  - { name: "Firefox: Install packages", become: yes, apt: { pkg: "{{ ('firefox firefox-locale-' + firefox_locales|join(' firefox-locale-')).split(' ') }}", state: latest }, tags: [firefox] }
  # 610. Firefox alternatives
  - { name: "Firefox: Set up alternatives", become: yes, alternatives: { name: "{{ item }}", path: "/usr/bin/firefox" }, with_items: [gnome-www-browser, x-www-browser], tags: [firefox] }
  # 620. Firefox policy for enterprise deployments
  - { name: "Firefox: Create enterprise deployment directories", become: yes, file: { path: "{{ item }}", state: directory, owner: "{{ ansible_user_id }}", mode: 0755 }, tags: [firefox], with_items: [
      "/usr/lib/firefox/distribution",
      "/usr/lib/mozilla/certificates",
      "/usr/local/lib/firefox",
      "/usr/local/lib/firefox/extensions"
    ] }
  - { name: "Firefox: Download unofficial extensions", get_url: { url: "{{ item.value.url | format(version=item.value.version) }}", dest: "/usr/local/lib/firefox/extensions/{{ item.key }}-{{ item.value.version }}-unofficial.xpi", checksum: "{{ item.value.checksum }}" }, with_dict: "{{ firefox_unofficial_extensions }}", tags: [firefox] }
  - { name: "Firefox: Create enterprise deployment policy", become: yes, copy: { dest: "/usr/lib/firefox/distribution/policies.json", content: "{{ firefox_policies | to_nice_json }}", owner: "{{ ansible_user_id }}", mode: 0444, force: yes }, tags: [firefox] }
  - name: "Firefox: Setting up AutoConfig"
    become: yes
    tags: [firefox]
    copy:
      dest: "/usr/lib/firefox/defaults/pref/autoconfig.js"
      owner: "{{ ansible_user_id }}"
      mode: 0444
      force: yes
      content: |
        // This file is managed by Ansible / Longitude.
        pref("general.config.filename", "firefox.cfg");
        pref("general.config.obscure_value", 0);
  - name: "Firefox: Create AutoConfig"
    become: yes
    tags: [firefox]
    copy:
      dest: "/usr/lib/firefox/firefox.cfg"
      owner: "{{ ansible_user_id }}"
      mode: 0444
      force: yes
      content: |
        // This file is managed by Ansible / Longitude. NOTE: preferences MUST start on line 2.
        {% for name, value in firefox_about_config | dictsort %}
        lockPref({{ name | to_json }}, {{ value | to_json }});
        {% endfor %}

  # 700. Dropbox
  - { name: "Dropbox: Install prerequisites", become: yes, apt: { pkg: [python-gpgme], state: present } }
  - { name: "Dropbox: Check installation", become: yes, command: "dpkg -l dropbox", register: dropbox_dpkg_query, changed_when: no, failed_when: no }
  - { name: "Dropbox: Install packages", become: yes, when: "dropbox_dpkg_query.rc > 0", apt: { deb: "https://www.dropbox.com/download?dl=packages/ubuntu/dropbox_{{ dropbox_version }}_amd64.deb", state: present } }

  # 750. Keybase
  - { name: "Keybase: Install prerequisites", become: yes, apt: { pkg: [gnupg, curl], state: present }, tags: [keybase] }
  - { name: "Keybase: Check installation", become: yes, command: "dpkg -l keybase", register: keybase_dpkg_query, changed_when: no, failed_when: no, tags: [keybase] }
  - { name: "Keybase: Download package and signature", get_url: { url: "{{ item }}", dest: "/tmp/{{ item | basename }}" }, when: "keybase_dpkg_query.rc > 0", tags: [keybase], with_items: [
      "https://prerelease.keybase.io/keybase_amd64.deb",
      "https://prerelease.keybase.io/keybase_amd64.deb.sig"
    ] }
  - { name: "Keybase: Check package signature", command: "gpg --status-fd 1 --no-default-keyring --keyring '{{ ansible_env.PWD }}/keys/keybase-20190624.asc.gpg' --verify /tmp/keybase_amd64.deb.sig", when: "keybase_dpkg_query.rc > 0", tags: [keybase] }
  - { name: "Keybase: Install package", become: yes, apt: { deb: "/tmp/keybase_amd64.deb", state: present }, when: "keybase_dpkg_query.rc > 0", tags: [keybase] }

  # 900. Tools and miscellaneous
  #
  # - 'android-tools-adb' - Android Debug Bridge (adb).
  # - 'filezilla' - full-featured FTP/SFTP client.
  # - 'gawk' - a better and more robust AWK.
  # - 'gconf|dconf-editor' - a command-line utility for messing with Gnome's settings.
  # - 'graphviz' - rich set of graph drawing tools.
  # - 'kazam' - capturing screencasts and screenshots.
  # - 'moreutils' - additional Unix utilities, e.g., sponge.
  # - 'mpack' - utilities for encoding and decoding binary files in MIME.
  # - 'mysql-client' - for interacting with MySQL servers.
  # - 'parcellite' - a clipboard manager from the dark ages, but does its job well.
  # - 'pdftk' - tool for manipulating PDF documents.
  # - 'pigz' - Parallel Implementation of GZip.
  # - 'poedit' - an editor for gettext catalogs (.po files).
  # - 'pv' - a Pipe Viewer which can be used to dislay a progress for long running operatings.
  # - 'socat' - TCP relay, shell interface to Unix sockets, SSL tunnelling, etc. Example: $ cat http-request.raw | socat - openssl:localhost:443,verify=0
  # - 'sqlite3' - a command-line interface for SQLite 3.
  # - 'sqlitebrowser' - a visual tool used to create, design and edit database files compatible with SQLite.
  # - 'trash-cli' - a `trash` command-line utility for sending files to the rubbish bin.
  # - 'unp' - a small Perl script which makes extraction of any archive files a bit easier.
  # - 'v4l2ucp' - a control panel for Video for Linux 2 Universal.
  # - 'w3m' - a text-based World Wide Web browser, useful for converting HTML to plain text.
  # - 'whois' - a command-line client for the WHOIS (RFC 3912) protocol.
  #
  - { name: "Miscellaneous: Install packages", become: yes, apt: { pkg: [
      android-tools-adb,
      filezilla,
      gawk,
      gconf-editor, dconf-editor,
      graphviz,
      kazam,
      moreutils,
      mpack,
      mysql-client,
      parcellite,
      pdftk,
      pigz,
      poedit,
      pv,
      socat,
      trash-cli,
      unp,
      w3m,
      whois
    ], state: latest } }
  - { name: "Miscellaneous: Add Python support for dconf", become: yes, pip: { executable: pip2, name: psutil, state: present } }
  - { name: "Miscellaneous: Configure the system", dconf: "{{ item }}", when: "ansible_env.IS_DOCKERIZED | default(0) != '1'", with_items: [
      { key: "/org/gnome/mutter/overlay-key", value: "''" },
      { key: "/org/gnome/desktop/input-sources/xkb-options", value: "['compose:ralt']" }
    ] }
  - { name: "Miscellaneous: Create directories", file: "{{ item }}", with_items: [
      { path: "{{ ansible_env.HOME }}/.config/fontconfig", state: directory },
      { path: "{{ ansible_env.HOME }}/.config/fontconfig/conf.d", state: directory }
    ] }
  - name: "Miscellaneous: Configure fonts"
    copy:
      dest: "{{ ansible_env.HOME }}/.config/fontconfig/conf.d/10-calibri.conf"
      force: no
      content: |
        <?xml version="1.0"?>
        <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
        <fontconfig>
            <match target="font">
                <test name="family" compare="contains">
                    <string>Calibri</string>
                </test>
                <edit name="embeddedbitmap">
                    <bool>false</bool>
                </edit>
            </match>
        </fontconfig>

  # 910. ImageMagick
  - { name: "ImageMagick: Install prerequisites", become: yes, apt: { pkg: [graphviz-dev, libpng-dev, libjpeg-dev, libgs-dev], state: present } }
  - { name: "ImageMagick: Check installation", become: yes, command: "ls /opt/ImageMagick-{{ imagemagick_version }}", register: imagemagick_install_query, changed_when: no, failed_when: no }
  - { name: "ImageMagick: Download source", get_url: { url: "http://download.ubk.hu/src/imagemagick/ImageMagick-{{ imagemagick_version }}.tar.xz", dest: "/tmp/ImageMagick-{{ imagemagick_version }}.tar.xz", checksum: "{{ imagemagick_checksum }}" }, when: "imagemagick_install_query.rc > 0" }
  - { name: "ImageMagick: Compile & install packages", when: "imagemagick_install_query.rc > 0",
      shell: "cd /tmp && tar --overwrite -Jxf 'ImageMagick-{{ imagemagick_version }}.tar.xz' && cd 'ImageMagick-{{ imagemagick_version }}' && ./configure --prefix='/opt/ImageMagick-{{ imagemagick_version }}' && make -j8 && make install" }
  - { name: "ImageMagick: Set up alternatives", become: yes, alternatives: { name: "{{ item }}", link: "/usr/local/bin/{{ item }}", path: "/opt/ImageMagick-{{ imagemagick_version }}/bin/{{ item }}" }, with_items: [
      animate,
      compare,
      composite,
      conjure,
      convert,
      display,
      identify,
      import,
      magick,
      magick-script,
      mogrify,
      montage,
      stream,

      Magick++-config,
      MagickCore-config,
      MagickWand-config
    ] }
  - { name: "ImageMagick: Check system installation", become: yes, command: "apt-mark showhold", register: imagemagick_system_install_query, changed_when: no, failed_when: no }
  - { name: "ImageMagick: Hold system packages", become: yes, when: "'imagemagick' not in imagemagick_system_install_query.stdout", command: "apt-mark hold imagemagick" }
  - { name: "ImageMagick: Allow manipulation of PDF files", lineinfile: { path: "/opt/ImageMagick-{{ imagemagick_version }}/etc/ImageMagick-{{ imagemagick_version.split('.')[0] }}/policy.xml", regexp: "PDF", line: '  <policy domain="module" rights="read|write" pattern="{PS,PDF,XPS}" />' } }

  # 920. youtube-dl
  - { name: "youtube-dl: Install script", get_url: { url: "https://github.com/ytdl-org/youtube-dl/releases/download/{{ youtube_dl_version }}/youtube-dl", dest: "/usr/local/bin/youtube-dl", mode: "+x", checksum: "{{ youtube_dl_checksum }}" } }

  # 950. ripgrep
  - { name: "ripgrep: Check installation", become: yes, command: "dpkg -l ripgrep", register: ripgrep_dpkg_query, changed_when: no, failed_when: no }
  - { name: "ripgrep: Install packages", become: yes, when: "ripgrep_dpkg_query.rc > 0", apt: { deb: "https://github.com/BurntSushi/ripgrep/releases/download/{{ ripgrep_version }}/ripgrep_{{ ripgrep_version }}_{{ ripgrep_platform }}.deb", state: present } }
  # 955. fzf
  - { name: "fzf: Check installation", become: yes, command: "ls /usr/local/bin/fzf-{{ fzf_version }}", register: fzf_install_query, changed_when: no, failed_when: no }
  - { name: "fzf: Download fzf", get_url: { url: "https://github.com/junegunn/fzf-bin/releases/download/{{ fzf_version }}/fzf-{{ fzf_version }}-{{ fzf_platform }}.tgz", dest: "/tmp/fzf-{{ fzf_version }}.tgz", checksum: "{{ fzf_checksum }}" }, when: "fzf_install_query.rc > 0" }
  - { name: "fzf: Install fzf", shell: "cd /tmp && tar --overwrite -zxf 'fzf-{{ fzf_version }}.tgz' && mv ./fzf '/usr/local/bin/fzf-{{ fzf_version }}'", when: "fzf_install_query.rc > 0" }
  - { name: "fzf: Set up alternatives", become: yes, alternatives: { name: "fzf", link: "/usr/local/bin/fzf", path: "/usr/local/bin/fzf-{{ fzf_version }}" } }
  - { name: "fzf: Create empty Zsh configuration", copy: { content: "", dest: "{{ ansible_env.HOME }}/.fzf.zsh", force: no } }
  # 960. pup
  - { name: "pup: Check installation", become: yes, command: "ls /usr/local/bin/pup-{{ pup_version }}", register: pup_install_query, changed_when: no, failed_when: no }
  - { name: "pup: Download pup", get_url: { url: "https://github.com/EricChiang/pup/releases/download/v{{ pup_version }}/pup_v{{ pup_version }}_{{ pup_platform }}.zip", dest: "/tmp/pup-{{ pup_version }}.zip", checksum: "{{ pup_checksum }}" }, when: "pup_install_query.rc > 0" }
  - { name: "pup: Install pup", shell: "cd /tmp && unzip -o 'pup-{{ pup_version }}.zip' && mv ./pup '/usr/local/bin/pup-{{ pup_version }}'", when: "pup_install_query.rc > 0" }
  - { name: "pup: Set up alternatives", become: yes, alternatives: { name: "pup", link: "/usr/local/bin/pup", path: "/usr/local/bin/pup-{{ pup_version }}" } }
  # 965. jq
  - { name: "jq: Check installation", become: yes, command: "ls /usr/local/bin/jq-{{ jq_version }}", register: jq_install_query, changed_when: no, failed_when: no }
  - { name: "jq: Download jq", get_url: { url: "https://github.com/stedolan/jq/releases/download/jq-{{ jq_version }}/jq-{{ jq_platform }}", dest: "/usr/local/bin/jq-{{ jq_version }}", mode: "+x", checksum: "{{ jq_checksum }}" }, when: "jq_install_query.rc > 0" }
  - { name: "jq: Set up alternatives", become: yes, alternatives: { name: "jq", link: "/usr/local/bin/jq", path: "/usr/local/bin/jq-{{ jq_version }}" } }
  # 970. HTTPie
  - { name: "HTTPie: Install packages", become: yes, pip: { executable: pip3, name: httpie, version: "{{ httpie_version }}", state: present }, tags: [httpie] }
  - { name: "HTTPie: Install plug-ins", become: yes, pip: { executable: pip3, name: "{{ item.name }}", version: "{{ item.version | default(omit) }}", state: "{% if 'version' in item %}present{% else %}latest{% endif %}" }, tags: [httpie], with_items: [
      { name: 'httpie-oauth' }
    ] }
  # 980. bat
  - { name: "bat: Check installation", become: yes, command: "dpkg -l bat", register: bat_dpkg_query, changed_when: no, failed_when: no }
  - { name: "bat: Download packages", get_url: { url: "https://github.com/sharkdp/bat/releases/download/v{{ bat_version }}/bat-musl_{{ bat_version }}_{{ bat_platform }}.deb", dest: "/tmp/bat-{{ bat_version }}.deb", checksum: "{{ bat_checksum }}" }, when: "bat_dpkg_query.rc > 0" }
  - { name: "bat: Install packages", become: yes, apt: { deb: "/tmp/bat-{{ bat_version }}.deb", state: present }, when: "bat_dpkg_query.rc > 0" }
  # 985. xidel
  - { name: "Xidel: Check installation", become: yes, command: "dpkg -l xidel", register: xidel_dpkg_query, changed_when: no, failed_when: no }
  - { name: "Xidel: Download packages", get_url: { url: "https://sourceforge.net/projects/videlibri/files/Xidel/Xidel%20{{ xidel_version.split('-')[0] }}/xidel_{{ xidel_version }}_{{ xidel_platform }}.deb/download", dest: "/tmp/xidel-{{ xidel_version }}.deb", checksum: "{{ xidel_checksum }}" }, when: "xidel_dpkg_query.rc > 0" }
  - { name: "Xidel: Install packages", become: yes, apt: { deb: "/tmp/xidel-{{ xidel_version }}.deb", state: present }, when: "xidel_dpkg_query.rc > 0" }
  # 990. ngrok
  - { name: "ngrok: Check installation", become: yes, command: "ls /usr/local/bin/ngrok", register: ngrok_install_query, changed_when: no, failed_when: no }
  - { name: "ngrok: Download ngrok", get_url: { url: "https://bin.equinox.io/a/{{ ngrok_stable_channel_id }}/ngrok-{{ ngrok_version }}-{{ ngrok_platform }}.zip", dest: "/tmp/ngrok.zip", checksum: "{{ ngrok_checksum }}" }, when: "ngrok_install_query.rc > 0" }
  - { name: "ngrok: Install ngrok", shell: "cd /tmp && unzip -o ngrok.zip && mv ./ngrok /usr/local/bin/ngrok", when: "ngrok_install_query.rc > 0" }
  # 995. ffsend (Firefox Send CLI)
  - { name: "Install ffsend", get_url: { url: "https://github.com/timvisee/ffsend/releases/download/v{{ ffsend_version }}/ffsend-v{{ ffsend_version }}-{{ ffsend_platform }}-static", dest: "/usr/local/bin/ffsend", mode: "+x", checksum: "{{ ffsend_checksum }}" } }
  # 999. AWS CLI
  - { name: "AWS: Install CLI packages", become: yes, pip: { executable: pip3, name: awscli, version: "{{ awscli_version }}", state: present } }

  # 1000. Dotfiles
  - { name: "Dotfiles: Clone the repository", git: { repo: "https://github.com/StanAngeloff/dotfiles.git", dest: "{{ ansible_env.HOME }}/dotfiles", remote: "github", update: no } }
  # 1010. Dotfiles linking files
  - { name: "Dotfiles: Creating directories and linking files", file: "{{ item }}", with_items: [
      { path: "{{ ansible_env.HOME }}/.vim", src: "./dotfiles/.vim", state: link, force: yes },
      { path: "{{ ansible_env.HOME }}/.config/nvim", src: "../.vim", state: link, force: yes },
      { path: "{{ ansible_env.HOME }}/.urxvt", src: "./dotfiles/.urxvt", state: link, force: yes },
      { path: "{{ ansible_env.HOME }}/.zsh", src: "./dotfiles/.zsh", state: link, force: yes },

      { path: "{{ ansible_env.HOME }}/.vim/autoload", state: directory },

      { path: "{{ ansible_env.HOME }}/.local", state: directory },
      { path: "{{ ansible_env.HOME }}/.local/share", state: directory },
      { path: "{{ ansible_env.HOME }}/.local/share/applications", state: directory },

      { path: "{{ ansible_env.HOME }}/.vimrc", src: "{{ ansible_env.HOME }}/dotfiles/.vimrc", state: hard, force: yes },
      { path: "{{ ansible_env.HOME }}/.config/nvim/init.vim", src: "{{ ansible_env.HOME }}/.vimrc", state: hard, force: yes },
      { path: "{{ ansible_env.HOME }}/.gitconfig", src: "{{ ansible_env.HOME }}/dotfiles/.gitconfig", state: hard, force: yes }, # NOTE: See https://stackoverflow.com/q/11786623
      { path: "{{ ansible_env.HOME }}/.rgrc", src: "{{ ansible_env.HOME }}/dotfiles/.rgrc", state: hard, force: yes },
      { path: "{{ ansible_env.HOME }}/.tigrc", src: "{{ ansible_env.HOME }}/dotfiles/.tigrc", state: hard, force: yes },
      { path: "{{ ansible_env.HOME }}/.tigrc.vim", src: "{{ ansible_env.HOME }}/dotfiles/.tigrc.vim", state: hard, force: yes },
      { path: "{{ ansible_env.HOME }}/.tmux.conf", src: "{{ ansible_env.HOME }}/dotfiles/.tmux.conf", state: hard, force: yes },
      { path: "{{ ansible_env.HOME }}/.zshrc", src: "{{ ansible_env.HOME }}/dotfiles/.zshrc", state: hard, force: yes },
      { path: "{{ ansible_env.HOME }}/.Xresources", src: "{{ ansible_env.HOME }}/dotfiles/.Xresources", state: hard, force: yes }
    ] }
  # 1020. Dotfiles install Vim plug-ins
  - { name: "Dotfiles: Install vim-plug", get_url: { url: "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim", dest: "{{ ansible_env.HOME }}/.vim/autoload/plug.vim" }, register: vim_plug_installed }
  - { name: "Dotfiles: Disable Git fsckObjects", command: "git config --global fetch.fsckObjects false", changed_when: no }
  - { name: "Dotfiles: Download Vim dictionaries", get_url: { url: "http://ftp.vim.org/vim/runtime/spell/{{ item[0] }}.{{ item[1] }}", dest: "{{ ansible_env.HOME }}/.config/nvim/spell/{{ item[0] }}.{{ item[1] }}" }, with_nested: [
      ["{{ neovim_dictionaries }}"],
      [spl, sug]
    ] }
  - { name: "Dotfiles: Install Vim plug-ins", command: "nvim -Es -u {{ ansible_env.HOME }}/.config/nvim/init.vim +PlugInstall +qa", when: vim_plug_installed.changed, failed_when: no }
  - { name: "Dotfiles: Re-enable Git fsckObjects", command: "git config --global fetch.fsckObjects true", changed_when: no }

  # 1100. Zsh
  - { name: "Zsh: Install prerequisites", become: yes, apt: { pkg: [libncurses-dev], state: present } }
  - { name: "Zsh: Check installation", become: yes, command: "ls /opt/zsh-{{ zsh_version }}", register: zsh_install_query, changed_when: no, failed_when: no }
  - { name: "Zsh: Download source", get_url: { url: "https://sourceforge.net/projects/zsh/files/zsh/{{ zsh_version }}/zsh-{{ zsh_version }}.tar.xz/download", dest: "/tmp/zsh-{{ zsh_version }}.tar.xz", checksum: "{{ zsh_checksum }}" }, when: "zsh_install_query.rc > 0" }
  - { name: "Zsh: Compile & install packages", when: "zsh_install_query.rc > 0",
      shell: "cd /tmp && tar --overwrite -Jxf 'zsh-{{ zsh_version }}.tar.xz' && cd 'zsh-{{ zsh_version }}' && ./configure --enable-pcre --prefix='/opt/zsh-{{ zsh_version }}' {% if ansible_env.IS_DOCKERIZED | default(0) == '1' %} --without-tcsetpgrp {% endif %} && make -j8 && make install" }
  - { name: "Zsh: Set up alternatives", become: yes, alternatives: { name: "zsh", link: "/bin/zsh", path: "/opt/zsh-{{ zsh_version }}/bin/zsh" } }
  - { name: "Zsh: Check shell", become: yes, shell: "cat /etc/passwd | grep '^{{ ansible_user_id }}:' | cut -d: -f7", register: zsh_shell_query, changed_when: no }
  - { name: "Zsh: Change shell", become: yes, shell: "chsh -s /bin/zsh '{{ ansible_user_id }}'", when: "zsh_shell_query.stdout != '/bin/zsh'" }

  - { name: "Reset connection to allow shell changes", meta: reset_connection }

  # 1200. rxvt-unicode
  - { name: "rxvt-unicode: Install prerequisites", become: yes, apt: { pkg: [cvs, libperl-dev, libx11-dev, libxft-dev, xdotool, xsel], state: present } }
  - { name: "rxvt-unicode: Check installation", become: yes, command: "ls /opt/rxvt-unicode-{{ rxvt_unicode_version }}", register: rxvt_unicode_install_query, changed_when: no, failed_when: no }
  - { name: "rxvt-unicode: Download CVS source", command: "cvs -q -z3 -d :pserver:anonymous@cvs.schmorp.de/schmorpforge checkout -D \"{{ rxvt_unicode_cvs_date }}\" rxvt-unicode", args: { chdir: '/tmp' }, when: "rxvt_unicode_install_query.rc > 0" }
  - { name: "rxvt-unicode: Download patches", get_url: { url: "{{ item.1.url }}", dest: "/tmp/rxvt-unicode-{{ item.0 }}.patch", checksum: "{{ item.1.checksum }}" }, with_indexed_items: "{{ rxvt_unicode_patches }}", when: "rxvt_unicode_install_query.rc > 0" }
  - name: "rxvt-unicode: Patch, compile & install packages"
    when: "rxvt_unicode_install_query.rc > 0"
    shell: |
      cd /tmp/rxvt-unicode &&
      {% for patch in rxvt_unicode_patches %}
        echo "Patching {{ patch.url | basename }}…"  &&
        patch --quiet --forward -p{{ patch.strip | default(0) }} < "/tmp/rxvt-unicode-{{ loop.index0 }}.patch" &&
      {% endfor %}
      ./configure {{ rxvt_unicode_configure_args | join(" ") }} --prefix="/opt/rxvt-unicode-{{ rxvt_unicode_version }}" &&
      make -j8 &&
      make install
    args: { executable: "/bin/bash" }
  - { name: "rxvt-unicode: Set up alternatives", become: yes, alternatives: { name: "{{ item }}", link: "/usr/local/bin/{{ item }}", path: "/opt/rxvt-unicode-{{ rxvt_unicode_version }}/bin/{{ item }}" }, with_items: [
      urxvt,
      urxvtc,
      urxvtd
    ] }
  - { name: "rxvt-unicode: Create desktop entry", copy: { content: "[Desktop Entry]\nVersion=1.0\nName=urxvt\nComment=An unicode capable rxvt clone\nExec=urxvt\nIcon=utilities-terminal\nTerminal=false\nType=Application\nCategories=System;TerminalEmulator;", dest: "{{ ansible_env.HOME }}/.local/share/applications/urxvt.desktop", force: no } }
  - { name: "rxvt-unicode: Create launch script", copy: { content: "#!/bin/sh\n\nxdotool search --class urxvt windowactivate || urxvt -e /bin/zsh -c 'tmux attach-session -t default 2>/dev/null || tmux new-session -s default -n default'", dest: "/usr/local/bin/urxvt-start", force: no, mode: "+x" } }
  - { name: "rxvt-unicode: Set up as default terminal", become: yes, alternatives: { name: "x-terminal-emulator", path: "/usr/local/bin/urxvt-start" } }

  # 1300. tmux
  - { name: "tmux: Install prerequisites", become: yes, apt: { pkg: [libevent-dev], state: present } }
  - { name: "tmux: Check installation", become: yes, command: "ls /opt/tmux-{{ tmux_version }}", register: tmux_install_query, changed_when: no, failed_when: no }
  - { name: "tmux: Download source", get_url: { url: "https://github.com/tmux/tmux/releases/download/{{ tmux_version }}/tmux-{{ tmux_version }}.tar.gz", dest: "/tmp/tmux-{{ tmux_version }}.tar.gz", checksum: "{{ tmux_checksum }}" }, when: "tmux_install_query.rc > 0" }
  - { name: "tmux: Compile & install packages", when: "tmux_install_query.rc > 0",
      shell: "cd /tmp && tar --overwrite -zxf 'tmux-{{ tmux_version }}.tar.gz' && cd 'tmux-{{ tmux_version }}' && ./configure --prefix='/opt/tmux-{{ tmux_version }}' && make -j8 && make install" }
  - { name: "tmux: Set up alternatives", become: yes, alternatives: { name: "tmux", link: "/usr/local/bin/tmux", path: "/opt/tmux-{{ tmux_version }}/bin/tmux" } }
  - { name: "tmux: Set up plug-ins directories", file: { path: "{{ item }}", state: directory }, with_items: [
      "{{ ansible_env.HOME }}/.tmux",
      "{{ ansible_env.HOME }}/.tmux/plugins",
    ] }
  - { name: "tmux: Clone Tmux Plugin Manager", git: { repo: "https://github.com/tmux-plugins/tpm", dest: "{{ ansible_env.HOME }}/.tmux/plugins/tpm", remote: "github", update: no } }

  # 1400. tig
  - { name: "tig: Install prerequisites", become: yes, apt: { pkg: [libncursesw5-dev], state: present } }
  - { name: "tig: Check installation", become: yes, command: "ls /opt/tig-{{ tig_version }}", register: tig_install_query, changed_when: no, failed_when: no }
  - { name: "tig: Download source", get_url: { url: "https://github.com/jonas/tig/releases/download/tig-{{ tig_version }}/tig-{{ tig_version }}.tar.gz", dest: "/tmp/tig-{{ tig_version }}.tar.gz", checksum: "{{ tig_checksum }}" }, when: "tig_install_query.rc > 0" }
  - { name: "tig: Compile & install packages", when: "tig_install_query.rc > 0",
      shell: "cd /tmp && tar --overwrite -zxf 'tig-{{ tig_version }}.tar.gz' && cd 'tig-{{ tig_version }}' && ./configure --prefix='/opt/tig-{{ tig_version }}' && make -j8 && make install" }
  - { name: "tig: Set up alternatives", become: yes, alternatives: { name: "tig", link: "/usr/local/bin/tig", path: "/opt/tig-{{ tig_version }}/bin/tig" } }

  # 1450. envchain
  - { name: "envchain: Install prerequisites", become: yes, apt: { pkg: [libsecret-1-dev, libreadline-dev], state: present } }
  - { name: "envchain: Check installation", become: yes, command: "ls /usr/local/bin/envchain", register: envchain_install_query, changed_when: no, failed_when: no }
  - { name: "envchain: Download source", get_url: { url: "https://github.com/sorah/envchain/archive/v{{ envchain_version }}.tar.gz", dest: "/tmp/envchain-{{ envchain_version }}.tar.gz", checksum: "{{ envchain_checksum }}" }, when: "envchain_install_query.rc > 0" }
  - { name: "envchain: Compile & install packages", when: "envchain_install_query.rc > 0",
      shell: "cd /tmp && tar --overwrite -zxf 'envchain-{{ envchain_version }}.tar.gz' && cd 'envchain-{{ envchain_version }}' && make && make install DESTDIR='/usr/local'" }

  # 1500. PHP & extensions
  - { name: "PHP: Add PPA", become: yes, apt_repository: { repo: "ppa:ondrej/php", update_cache: yes } }
  - { name: "PHP: Install packages", become: yes, apt: { pkg: "{{ ('php-pear php' + php_version|string + '-cli php' + php_version|string + '-dev php' + php_version|string + '-' + php_extensions|join(' php' + php_version|string + '-')).split(' ') }}", state: latest } }
  - { name: "PHP: Check Composer installation", become: yes, command: "ls /usr/local/bin/composer", register: composer_install_query, changed_when: no, failed_when: no }
  - { name: "PHP: Install Composer", shell: "{{ item }}", when: "composer_install_query.rc > 0", with_items: [
      "php -r \"copy('https://getcomposer.org/installer', '/tmp/composer-setup.php');\"",
      "php -r \"if (hash_file('sha384', '/tmp/composer-setup.php') === '{{ composer_setup_checksum }}') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('/tmp/composer-setup.php'); } echo PHP_EOL;\"",
      "php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer",
      "php -r \"unlink('/tmp/composer-setup.php');\"",
    ] }

  # 1600. NodeJS
  - { name: "NodeJS: Import GPG key", become: yes, apt_key: { id: "{{ nodesource_gpg_key_id }}", url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key" } }
  - { name: "NodeJS: Add repository", become: yes, apt_repository: { repo: "deb https://deb.nodesource.com/node_{{ nodejs_version }}.x {{ ansible_distribution_release }} main", update_cache: yes } }
  - { name: "NodeJS: Install packages", become: yes, apt: { pkg: [nodejs], state: latest } }
  - { name: "NodeJS: Create directories", become: yes, file: { path: "/usr/local/lib/node_modules", state: directory, owner: "{{ ansible_user_id }}" } }
  - { name: "NodeJS: Install global packages in /usr/local", lineinfile: { create: yes, path: "{{ ansible_env.HOME }}/.npmrc", regexp: "^prefix=", line: "prefix=/usr/local" } }

  # 1700. Wine
  - { name: "Wine: Import GPG key", become: yes, apt_key: { id: "{{ wine_gpg_key_id }}", url: "https://dl.winehq.org/wine-builds/winehq.key" } }
  - { name: "Wine: Add repository", become: yes, apt_repository: { repo: "deb https://dl.winehq.org/wine-builds/ubuntu/ {{ ansible_distribution_release }} main", update_cache: yes } }
  - { name: "Wine: Install packages", become: yes, apt: { pkg: [winehq-stable], state: latest } }
  # 1750. PlayOnLinux
  - { name: "PlayOnLinux: Import GPG key", become: yes, apt_key: { id: "{{ playonlinux_gpg_key_id }}", url: "http://deb.playonlinux.com/public.gpg" } }
  - { name: "PlayOnLinux: Add repository", become: yes, apt_repository: { repo: "deb http://deb.playonlinux.com/ {{ ansible_distribution_release }} main", update_cache: yes } }
  - { name: "PlayOnLinux: Install packages", become: yes, apt: { pkg: [playonlinux], state: latest } }
  # 1760. QEMU
  - { name: "QEMU: Install prerequisites", become: yes, apt: { pkg: [bison, flex, libpixman-1-dev, libudev-dev], state: present }, tags: [qemu] }
  - { name: "QEMU: Check installation", become: yes, command: "ls /opt/qemu-{{ qemu_version }}", register: qemu_install_query, changed_when: no, failed_when: no, tags: [qemu] }
  - { name: "QEMU: Download source", get_url: { url: "https://download.qemu.org/qemu-{{ qemu_version }}.tar.xz", dest: "/tmp/qemu-{{ qemu_version }}.tar.xz", checksum: "{{ qemu_checksum }}" }, when: "qemu_install_query.rc > 0", tags: [qemu] }
  - { name: "QEMU: Compile & install packages", when: "qemu_install_query.rc > 0",
      shell: "cd /tmp && tar --overwrite -Jxf 'qemu-{{ qemu_version }}.tar.xz' && cd 'qemu-{{ qemu_version }}' && ./configure --prefix='/opt/qemu-{{ qemu_version }}' && make -j8 && make install", tags: [qemu] }
  - { name: "QEMU: Capture available systems", command: "find /opt/qemu-{{ qemu_version }}/bin -type f -perm -u=x -printf '%f\\n'", register: qemu_installed_systems, changed_when: no, tags: [qemu] }
    # => (for 4.0.0)
    # qemu-system-sh4 qemu-aarch64 qemu-system-riscv64 qemu-system-xtensaeb qemu-system-mips qemu-xtensa qemu-xtensaeb
    # qemu-img qemu-microblaze qemu-system-ppc64 qemu-ppc64 qemu-system-sparc qemu-sparc32plus qemu-system-cris
    # qemu-system-unicore32 qemu-system-nios2 elf2dmp qemu-system-ppc qemu-system-arm qemu-riscv32 qemu-nbd
    # ivshmem-server qemu-nios2 qemu-cris qemu-system-sh4eb qemu-system-tricore qemu-ga qemu-or1k qemu-m68k
    # qemu-system-riscv32 qemu-hppa qemu-riscv64 qemu-system-i386 qemu-mips64el qemu-system-m68k qemu-system-s390x
    # qemu-ppc qemu-x86_64 qemu-system-aarch64 qemu-sparc qemu-s390x qemu-system-hppa qemu-sparc64 qemu-arm
    # qemu-ppc64abi32 qemu-system-microblazeel qemu-sh4 qemu-pr-helper qemu-system-mips64 qemu-system-mips64el
    # qemu-mipsn32 qemu-system-microblaze qemu-system-alpha qemu-ppc64le qemu-mipsel qemu-system-moxie qemu-aarch64_be
    # qemu-alpha qemu-io qemu-system-xtensa qemu-tilegx ivshmem-client qemu-mips64 qemu-sh4eb qemu-system-sparc64
    # qemu-system-mipsel qemu-i386 qemu-mips qemu-microblazeel qemu-system-x86_64 qemu-edid qemu-system-lm32
    # qemu-system-or1k qemu-armeb qemu-mipsn32el
  - { name: "QEMU: Set up alternatives", become: yes, alternatives: { name: "{{ item }}", link: "/usr/local/bin/{{ item }}", path: "/opt/qemu-{{ qemu_version }}/bin/{{ item }}" }, tags: [qemu], with_items: "{{ qemu_installed_systems.stdout_lines }}" }
  - { name: "QEMU: Set permissions for bridge helper", become: yes, file: { path: "/opt/qemu-{{ qemu_version }}/libexec/qemu-bridge-helper", state: file, owner: "root", group: "{{ ansible_user_gid }}", mode: 'u=srwx,g=rx,o=' }, tags: [qemu] }
  - { name: "QEMU: Set up bridge helper alternative", become: yes, alternatives: { name: "qemu-bridge-helper", link: "/usr/local/bin/qemu-bridge-helper", path: "/opt/qemu-{{ qemu_version }}/libexec/qemu-bridge-helper" }, tags: [qemu] }

  # 1800. ffmpeg
  - { name: "ffmpeg: Check installation", become: yes, command: "ls /opt/ffmpeg-{{ ffmpeg_version }}", register: ffmpeg_install_query, changed_when: no, failed_when: no }
  - { name: "ffmpeg: Download static build", get_url: { url: "https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-{{ ffmpeg_platform }}-static.tar.xz", dest: "/tmp/ffmpeg-{{ ffmpeg_version }}.tar.xz", checksum: "{{ ffmpeg_checksum }}" }, when: "ffmpeg_install_query.rc > 0" }
  - { name: "ffmpeg: Unpack & install packages", when: "ffmpeg_install_query.rc > 0",
      shell: "cd /tmp && tar --overwrite -Jxf 'ffmpeg-{{ ffmpeg_version }}.tar.xz' && mv 'ffmpeg-{{ ffmpeg_version }}-{{ ffmpeg_platform }}-static' '/opt/ffmpeg-{{ ffmpeg_version }}'" }
  - { name: "ffmpeg: Set up alternatives", become: yes, alternatives: { name: "{{ item }}", link: "/usr/local/bin/{{ item }}", path: "/opt/ffmpeg-{{ ffmpeg_version }}/{{ item }}" }, with_items: [
      ffmpeg,
      ffprobe
    ] }

  # 1900. Authy Desktop
  #
  # See https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=authy
  #
  - { name: "Authy: Install prerequisites", become: yes, apt: { pkg: [p7zip], state: present }, tags: [authy] }
  - { name: "Authy: Check installation", become: yes, command: "ls /opt/authy-{{ authy_desktop_version }}", register: authy_desktop_install_query, changed_when: no, failed_when: no, tags: [authy] }
  - { name: "Authy: Download Windows installer", get_url: { url: "https://s3.amazonaws.com/authy-electron-repository-production/authy/stable/{{ authy_desktop_version }}/win32/x64/Authy%20Desktop%20Setup%20{{ authy_desktop_version }}.exe", dest: "/tmp/AuthyDesktopSetup{{ authy_desktop_version }}.exe", checksum: "{{ authy_desktop_checksum }}" }, when: "authy_desktop_install_query.rc > 0", tags: [authy] }
  - name: "Authy: Extract & install Electron app"
    when: "authy_desktop_install_query.rc > 0"
    shell: |
      cd /tmp &&
      7z x "AuthyDesktopSetup{{ authy_desktop_version }}.exe" -o"authy-{{ authy_desktop_version }}" -y &&
      cd "authy-{{ authy_desktop_version }}" &&
      7z x "authy-electron-{{ authy_desktop_version }}-full.nupkg" -y &&
      mkdir app &&
      npx -q asar@2 e lib/net45/resources/app.asar app &&
      cd app &&
      npm i --save -q electron@4 &&
      cp -R "/tmp/authy-{{ authy_desktop_version }}/app" /opt/authy-{{ authy_desktop_version }}
    args: { executable: "/bin/bash" }
    tags: [authy]
  - name: "Authy: Add desktop icon"
    become: yes
    copy:
      dest: "/usr/share/applications/authy.desktop"
      content: |
        [Desktop Entry]
        Version={{ authy_desktop_version }}
        Type=Application
        Terminal=false
        Exec=/opt/authy-{{ authy_desktop_version }}/node_modules/electron/dist/electron /opt/authy-{{ authy_desktop_version }}/
        Name=Authy
        Comment=Two-Factor Authentication
        Icon=/opt/authy-{{ authy_desktop_version }}/img/logos/icon128.png
        StartupWMClass=Authy Desktop
    tags: [authy]

  # 2000. Just stuff…
  #
  # tesseract: OCR'ing images and parsing text out.
  - { name: "tesseract: Install OCR packages", become: yes, apt: { pkg: [tesseract-ocr, tesseract-ocr-bul, tesseract-ocr-eng], state: latest } }

  # InfoNotary: qualified electronic signature used when paying bills, accessing tax statements, etc.
  #
  # - 'bit4id-ipki' - driver for Bit4id smart cards.
  # - 'pcsc-omnikey' - driver for OmniKey readers.
  # - 'infonotary-client-software' - software for management of smart cards.
  #
  - { name: "InfoNotary: Import GPG key", become: yes, apt_key: { id: "3D4B1879", url: "https://repository.infonotary.com/install/linux/INotaryCodeSigningD.key.asc" } }
  - { name: "InfoNotary: Add repository", become: yes, apt_repository: { repo: "deb http://repository.infonotary.com/install/linux/DEBS/ any non-free", update_cache: yes } }
  - { name: "InfoNotary: Install packages", become: yes, apt: { pkg: [bit4id-ipki, pcsc-omnikey, infonotary-client-software], state: latest } }
  - { name: "InfoNotary: Create Firefox certificate", become: yes, copy: { dest: "/usr/lib/mozilla/certificates/{{ item }}", src: "certificates/{{ item }}", owner: "{{ ansible_user_id }}", mode: 0444, force: yes }, with_items: [
      InfoNotaryQualifiedLegalPersonSealCA.pem,
      InfoNotaryQualifiedPersonalSignCA.pem,
      InfoNotaryQualifiedTimeStampingServiceCA.pem,
      InfoNotaryQualifiedValidatedDomainCA.pem,
      InfoNotaryQualifiedValidationServicesCA.pem,
      InfoNotaryTSPRoot.pem
    ] }

  # 2010. ufw
  - { name: "ufw: Install packages", become: yes, apt: { pkg: [ufw], state: present }, tags: [ufw] }
  - { name: "ufw: Configure defaults", become: yes, ufw: { direction: "{{ item.direction }}", policy: "{{ item.policy }}" }, with_items: "{{ ufw_policy }}", notify: "ufw::restart", tags: [ufw] }
  - { name: "ufw: Configure rules", become: yes, ufw: "{{ item }}", with_items: "{{ ufw_rules }}", notify: "ufw::restart", tags: [ufw] }
  - { name: "ufw: Enable logging", become: yes, ufw: { logging: on }, notify: "ufw::restart", tags: [ufw] }
  - { name: "ufw: Allow VPN PPTP connections", become: yes, lineinfile: { path: "/etc/ufw/before.rules", regexp: "-p\\s+47\\b", line: "-A ufw-before-input -p 47 -j ACCEPT", insertbefore: "drop INVALID packets" }, tags: [ufw] }
  - { name: "ufw: Turn on", become: yes, ufw: { state: enabled }, tags: [ufw] }

  # 3000. Communications
  - { name: "Install Franz", get_url: { url: "https://github.com/meetfranz/franz/releases/download/v{{ franz_version }}/franz-{{ franz_version }}-{{ franz_platform }}.AppImage", dest: "/usr/local/bin/franz", mode: "+x", checksum: "{{ franz_checksum }}" } }
  - { name: "Viber: Check installation", become: yes, command: "dpkg -l viber", register: viber_dpkg_query, changed_when: no, failed_when: no, tags: [viber] }
  - { name: "Viber: Install packages", become: yes, when: "viber_dpkg_query.rc > 0", apt: { deb: "https://download.cdn.viber.com/cdn/desktop/Linux/viber.deb", state: present }, tags: [viber] }

  # 4000. Flatpak {{{1
  #
  # See https://flatpak.org/setup/Ubuntu/
  #
  # NOTE: Package 'gnome-software-plugin-flatpak' is not available on Ubuntu 16.04.
  #
  - { name: "Flatpak: Add PPA", become: yes, apt_repository: { repo: "ppa:alexlarsson/flatpak", update_cache: yes }, tags: [flatpak] }
  - { name: "Flatpak: Install packages", become: yes, apt: { pkg: [flatpak], state: present }, register: flatpak_installed, tags: [flatpak] }
  - block:
      - { debug: { msg: 'Flatpak NOTE: You MUST reboot the system for changes to take effect. Please re-run the playbook to finish the installations.' } }
      - { meta: end_play }
    when: 'flatpak_installed is defined and flatpak_installed.changed'
    tags: [flatpak]
  - { name: "Flatpak: Add Flathub repository to the user install", flatpak_remote: { name: flathub, state: present, method: user, flatpakrepo_url: 'https://dl.flathub.org/repo/flathub.flatpakrepo' }, tags: [flatpak] }

  # 4010. Flathub
  #
  # These packages don't require additional configuration and can be used off-the-shelf.
  #
  # org.inkscape.Inkscape
  #     https://inkscape.org/
  #
  # org.gnome.Boxes
  #     https://help.gnome.org/users/gnome-boxes/stable/
  #
  # org.remmina.Remmina
  #     https://remmina.org/
  #
  - { name: "Flathub: Install packages", flatpak: { method: user, name: "{{ item }}", remote: flathub, state: present }, tags: [flathub], with_items: [
      org.inkscape.Inkscape,
      org.gnome.Boxes,
      org.remmina.Remmina
    ] }

  # 4020. Evolution Mail
  - { name: "Evolution: Install prerequisites", become: yes, apt: { pkg: [xdg-utils], state: present }, tags: [evolution] }
  - { name: "Evolution: Remove system packages", become: yes, apt: { pkg: [evolution, evolution-common, evolution-indicator, evolution-plugins, evolution-plugins-experimental], state: absent }, tags: [evolution] }
  - { name: "Evolution: Install Flathub packages", flatpak: { method: user, name: org.gnome.Evolution, remote: flathub, state: present }, tags: [evolution] }
  - { name: "Evolution: Check MIME handler", command: 'xdg-mime query default x-scheme-handler/mailto', register: evolution_mime_query_1, changed_when: no, failed_when: no, tags: [evolution] }
  - { name: "Evolution: Set as MIME handler", when: "(evolution_mime_query_1.rc == 0) and ('org.gnome.Evolution.desktop' not in evolution_mime_query_1.stdout)", command: "xdg-mime default org.gnome.Evolution.desktop x-scheme-handler/mailto", tags: [evolution] }

  # 4030. GIMP
  - { name: "GIMP: Remove system packages", become: yes, apt: { pkg: [gimp], state: absent }, tags: [gimp] }
  - { name: "GIMP: Install Flathub packages", flatpak: { method: user, name: org.gimp.GIMP, remote: flathub, state: present }, tags: [gimp] }

  # 4040. LibreOffice
  - { name: "LibreOffice: Remove system packages", become: yes, apt: { pkg: [libreoffice-calc, libreoffice-draw, libreoffice-gnome, libreoffice-gtk, libreoffice-impress, libreoffice-math, libreoffice-ogltrans, libreoffice-pdfimport, libreoffice-style-breeze, libreoffice-style-galaxy, libreoffice-style-tango, libreoffice-writer], state: absent }, tags: [libreoffice] }
  - { name: "LibreOffice: Install Flathub packages", flatpak: { method: user, name: org.libreoffice.LibreOffice, remote: flathub, state: present }, register: libreoffice_installed, tags: [libreoffice] }
  - { name: "LibreOffice: Re-install locale package", command: "flatpak install --user --reinstall --noninteractive flathub org.libreoffice.LibreOffice.Locale", when: libreoffice_installed.changed, tags: [libreoffice] }

  # 4050. KeePassXC
  - { name: "KeePassXC: Remove official PPA", become: yes, apt_repository: { repo: "ppa:phoerious/keepassxc", state: absent }, tags: [keepassxc] }
  - { name: "KeePassXC: Remove system packages", become: yes, apt: { pkg: [keepassxc], state: absent }, tags: [keepassxc] }
  - { name: "KeePassXC: Uninstall AppImage & artifacts", become: yes, file: { path: "{{ item }}", state: absent }, tags: [keepassxc], with_items: [
      "/usr/local/bin/keepassxc",
      "/usr/local/share/icons/keepassxc.png",
      "/usr/share/applications/org.keepassxc.KeePassXC.desktop"
    ] }
  - { name: "KeePassXC: Install Flathub packages", flatpak: { method: user, name: org.keepassxc.KeePassXC, remote: flathub, state: present }, tags: [keepassxc] }
  - { name: "KeePassXC: Fix system tray icon", replace: { path: "{{ ansible_env.HOME }}/.local/share/flatpak/exports/share/applications/org.keepassxc.KeePassXC.desktop", regexp: "^(Exec=/usr/bin/flatpak run)( --own-name=\"org.kde.*\")?", replace: '\1 --own-name="org.kde.*"' }, tags: [keepassxc] }

  # 4100. Communications
  - { name: "Skype: Remove system packages", become: yes, apt: { pkg: [skypeforlinux], state: absent }, tags: [skype] }
  - { name: "Skype: Install Flathub packages", flatpak: { method: user, name: com.skype.Client, remote: flathub, state: present }, tags: [skype] }

  # 4999. Flatpak
  - { name: "Flatpak: Create font directories", file: { path: "{{ item[1] | format(name=item[0], HOME=ansible_env.HOME) }}", state: directory }, tags: [flatpak], with_nested: [
      [
        org.gnome.Evolution,
        org.libreoffice.LibreOffice
      ],
      [
        "%(HOME)s/.var/app/%(name)s/config/fontconfig",
        "%(HOME)s/.var/app/%(name)s/config/fontconfig/conf.d"
      ]
    ] }
  - { name: "Flatpak: Configure fonts", copy: { src: "{{ ansible_env.HOME }}/.config/fontconfig/conf.d/10-calibri.conf", dest: "{{ ansible_env.HOME }}/.var/app/{{ item }}/config/fontconfig/conf.d/10-calibri.conf", force: yes }, tags: [flatpak], with_items: [
      org.gnome.Evolution,
      org.libreoffice.LibreOffice
    ] }

  # }}}1

  # 9000. Post-install clean up & purging of packages
  #
  # - 'snapd' - This is the package providing the `snap` binary, prefer Flatpak which is decentralized.
  #
  - { name: "Post-install: Clean up packages", become: yes, apt: { pkg: [
      aisleriot,
      chromium-browser, chromium-browser-l10n, chromium-codecs-ffmpeg-extra,
      gnome-mahjongg, gnome-mines, gnome-sudoku,
      rhythmbox, rhythmbox-data,
      shotwell,
      thunderbird,
      webbrowser-app,
      empathy, empathy-common,
      snapd
    ], state: absent, autoremove: yes } }
  - { name: "Post-install: Purge packages", become: yes, apt: { pkg: [
      snapd
    ], state: absent, purge: true } }

  # 9010. Scheduled jobs to tame caches
  - name: "Post-install: Clean up caches daily"
    become: yes
    tags: [cache]
    copy:
      dest: "/etc/cron.daily/99tame-caches"
      owner: "{{ ansible_user_id }}"
      group: root
      mode: 0774
      force: yes
      content: |
        #!/bin/sh
        set -e
        {% set indent = "\t" %}
        {% set su = "su " + (ansible_user_id | quote) + " -c" %}
        if which composer 1>/dev/null 2>&1; then
        {{ indent }}{{ su }} "composer clear-cache -n --quiet" 1>/dev/null
        fi
        if which npm 1>/dev/null 2>&1; then
        {{ indent }}{{ su }} "npm cache clean --force --loglevel error" 1>/dev/null
        fi
        if which yarn 1>/dev/null 2>&1; then
        {{ indent }}{{ su }} "yarn cache clean" 1>/dev/null
        fi


# vim: sw=2 ts=2 et :
